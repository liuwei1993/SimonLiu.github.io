{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/materialized/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/grey.png","path":"images/grey.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/banner.png","path":"images/banner.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/LICENSE.txt","path":"fonts/roboto/LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff2","path":"fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff2","path":"fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff2","path":"fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff2","path":"fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff2","path":"fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.eot","path":"icons/custom-icons/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.svg","path":"icons/custom-icons/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.ttf","path":"icons/custom-icons/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff","path":"icons/custom-icons/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff2","path":"icons/custom-icons/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/LICENSE.txt","path":"icons/material-icons/LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.ijmap","path":"icons/material-icons/MaterialIcons-Regular.ijmap","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff","path":"icons/material-icons/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff2","path":"icons/material-icons/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-10.png","path":"images/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-12.png","path":"images/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-17.png","path":"images/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-19.png","path":"images/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-3.png","path":"images/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-4.png","path":"images/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-6.png","path":"images/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-8.png","path":"images/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-9.png","path":"images/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff","path":"fonts/roboto/Roboto-Black.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff2","path":"fonts/roboto/Roboto-Black.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff","path":"fonts/roboto/Roboto-BlackItalic.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff","path":"fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff2","path":"fonts/roboto/Roboto-BlackItalic.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff","path":"fonts/roboto/Roboto-BoldItalic.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff2","path":"fonts/roboto/Roboto-BoldItalic.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff","path":"fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff","path":"fonts/roboto/Roboto-LightItalic.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff2","path":"fonts/roboto/Roboto-LightItalic.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff","path":"fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff","path":"fonts/roboto/Roboto-MediumItalic.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff2","path":"fonts/roboto/Roboto-MediumItalic.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff","path":"fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff","path":"fonts/roboto/Roboto-RegularItalic.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff2","path":"fonts/roboto/Roboto-RegularItalic.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff","path":"fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff2","path":"fonts/roboto/Roboto-ThinItalic.woff2","modified":0,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff","path":"fonts/roboto/Roboto-ThinItalic.woff","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-1.png","path":"images/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-11.png","path":"images/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-13.png","path":"images/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-14.png","path":"images/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-15.png","path":"images/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-16.png","path":"images/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-18.png","path":"images/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-2.png","path":"images/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-5.png","path":"images/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/images/random/material-7.png","path":"images/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/materialized/source/js/mdui.js","path":"js/mdui.js","modified":0,"renderable":1},{"_id":"themes/materialized/source/css/mdui.css","path":"css/mdui.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/test.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1576113981693},{"_id":"source/.DS_Store","hash":"d1e2f03444fadf3dd6c21b3df80723b619298c1b","modified":1576237564336},{"_id":"source/_posts/test.md","hash":"797f641672eba3a62656d35beaf8126b7e7bb99c","modified":1576113981692},{"_id":"source/_posts/test/icon.jpeg","hash":"578e12302d6c03d55f8723815d969f1cbb5ce1be","modified":1576113981693},{"_id":"public/test.html","hash":"ce3aef39c49a2a8957027db19b24f3d6abb9c1ee","modified":1576115189651},{"_id":"public/2019/12/12/test/index.html","hash":"e486940f6055098b03f3132608e1735819b4629d","modified":1576114493788},{"_id":"public/archives/index.html","hash":"14414a603e7ca5a35004d6352e478d0a32b589ed","modified":1576237653576},{"_id":"public/archives/2019/index.html","hash":"0284e858d30a45af3aa8b6cf12d7c27d11c8ae32","modified":1576237653576},{"_id":"public/archives/2019/12/index.html","hash":"8b13f86b0d6538bd2a4b1ab135009d43064994dc","modified":1576237653576},{"_id":"public/tags/tag/index.html","hash":"e7944f43c5008fd477ebcfff6b6ab0b1b4b86346","modified":1576114454635},{"_id":"public/tags/tag2/index.html","hash":"8e7e3605c7105b405718e2cf05486c9ca5b15ea6","modified":1576115189651},{"_id":"public/index.html","hash":"2d179c78f5e862aef3ad8c0d1eb1d9b7f63c8626","modified":1576237653576},{"_id":"public/2019/12/12/test/icon.jpeg","hash":"578e12302d6c03d55f8723815d969f1cbb5ce1be","modified":1576113989357},{"_id":"themes/materialized/.gitignore","hash":"10a056ff135445236571951759679a6d5fa85ff8","modified":1576114432005},{"_id":"themes/materialized/README.md","hash":"fdd9b3ae0cd9abe69fe1e30feab931a248dcec42","modified":1576114432005},{"_id":"themes/materialized/_config.yml","hash":"07d5610f2d2c781a19fd04f190fccfa95ada73cb","modified":1576114432005},{"_id":"themes/materialized/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1576114431998},{"_id":"themes/materialized/.git/config","hash":"b69fe71f98729cf49cb2b145cfc858f5b17d5fbf","modified":1575978091951},{"_id":"themes/materialized/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1576114427312},{"_id":"themes/materialized/.git/index","hash":"ff8ff8890006d9bce108e2a703057b298d543c1f","modified":1575979691392},{"_id":"themes/materialized/.git/packed-refs","hash":"2dcc969ede87ead9ed7573077629027429b7b6dd","modified":1576114431995},{"_id":"themes/materialized/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1576114432008},{"_id":"themes/materialized/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1576114432008},{"_id":"themes/materialized/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1576114432008},{"_id":"themes/materialized/layout/layout.ejs","hash":"6123a13dde29a366e44dc918406acb47ec7338d4","modified":1576114432008},{"_id":"themes/materialized/layout/page.ejs","hash":"9f916bc8338279f5f845d942fc14b480482e6e16","modified":1576114432008},{"_id":"themes/materialized/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1576114432009},{"_id":"themes/materialized/layout/post.ejs","hash":"9f916bc8338279f5f845d942fc14b480482e6e16","modified":1576114432009},{"_id":"themes/materialized/languages/en.yml","hash":"6ee2569619ec1547d79aeb0e8b98ec053de4ce45","modified":1576114432005},{"_id":"themes/materialized/languages/zh-CN.yml","hash":"323058de2eb1ce085a22f2add0609688984910d1","modified":1576114432005},{"_id":"themes/materialized/scripts/index.js","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1576114432009},{"_id":"themes/materialized/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1576114427314},{"_id":"themes/materialized/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1576114427313},{"_id":"themes/materialized/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1576114427314},{"_id":"themes/materialized/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1576114427315},{"_id":"themes/materialized/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1576114427315},{"_id":"themes/materialized/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1576114427315},{"_id":"themes/materialized/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1575978018128},{"_id":"themes/materialized/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1576114427313},{"_id":"themes/materialized/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1576114427314},{"_id":"themes/materialized/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1576114427314},{"_id":"themes/materialized/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1576114427315},{"_id":"themes/materialized/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1575978018126},{"_id":"themes/materialized/.git/logs/HEAD","hash":"8ea964bf0f06fd77a9f17957e0c1461fa72beb97","modified":1575978091950},{"_id":"themes/materialized/layout/_partial/archive.ejs","hash":"1d29db62f3ae8b431949b1a513c41a3bfd209c05","modified":1576114432006},{"_id":"themes/materialized/layout/_partial/article.ejs","hash":"e06cda91e58bf7726325b7651bd845232fc6d662","modified":1576114432006},{"_id":"themes/materialized/layout/_partial/footer.ejs","hash":"88fbc34070fadfa5c2fb2fa0cfba0833fca61b01","modified":1576114432006},{"_id":"themes/materialized/layout/_partial/head.ejs","hash":"e1e8134d44558e095f73584dddebd4f51e473955","modified":1576114432006},{"_id":"themes/materialized/layout/_partial/header.ejs","hash":"e49cb5a810c7ae5760fea63f42babb6445f3f25c","modified":1576114432006},{"_id":"themes/materialized/layout/_partial/sidebar.ejs","hash":"c9fc59b64464203b5700686ea82e16cca041a531","modified":1576114432006},{"_id":"themes/materialized/source/css/style.css","hash":"b57fd777fc8a48bc416fbc37f42796403ad19cd2","modified":1576114432011},{"_id":"themes/materialized/source/images/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1576114432028},{"_id":"themes/materialized/source/images/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1576114432029},{"_id":"themes/materialized/source/images/grey.png","hash":"4562825d902a6cdb6414c75bfad492d98584c63a","modified":1576114432029},{"_id":"themes/materialized/source/js/script.js","hash":"d17a7fd70cf423a52dd1a405ca5009e004dd074e","modified":1576114432041},{"_id":"themes/materialized/source/images/banner.png","hash":"09dc164e22c87a9d736d625f0887b4bc33e7477e","modified":1576114432029},{"_id":"themes/materialized/.git/objects/pack/pack-faf319aafa8fa7ac4b5ed9508e545f1a8a956775.idx","hash":"efecbaa04cbe50674cc2d79482f85e61de8155f9","modified":1576114431987},{"_id":"themes/materialized/.git/refs/heads/master","hash":"b3666b739c3f1f78a5e1fa8a39e530301f68744a","modified":1576114431999},{"_id":"themes/materialized/layout/_widget/comment/changyan.ejs","hash":"3a954d86a2a0ea96621e183cf89f16c99c387a3b","modified":1576114432007},{"_id":"themes/materialized/layout/_widget/comment/disqus.ejs","hash":"a8422c9bd22c24e8c09c1c188f71c46687b14211","modified":1576114432007},{"_id":"themes/materialized/layout/_widget/comment/gitalk.ejs","hash":"0d95b1213e9234e1aaa7d275b6b5b7b27bd1d2c7","modified":1576114432007},{"_id":"themes/materialized/layout/_widget/comment/livere.ejs","hash":"abeada8bef10dd50134e7319271f3e942acf9cbb","modified":1576114432008},{"_id":"themes/materialized/layout/_widget/comment/valine.ejs","hash":"f7f13b65862af3936fcfe3b7a50ad971e606c4e2","modified":1576114432008},{"_id":"themes/materialized/layout/_widget/analytics/baidu-analytics.ejs","hash":"eb3b16d53b191c724853a76a671f001bf2146b44","modified":1576114432007},{"_id":"themes/materialized/layout/_widget/analytics/cnzz-analytics.ejs","hash":"3c94798a0031383fabefbf847be5cb42f2ff5573","modified":1576114432007},{"_id":"themes/materialized/layout/_widget/analytics/google-analytics.ejs","hash":"bf07a1101417a00b47dc7784407d8bd3b4fef710","modified":1576114432007},{"_id":"themes/materialized/source/fonts/roboto/LICENSE.txt","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1576114432011},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1576114432015},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff2","hash":"df835660087fc7421a7667d8b68d759e0e1dbbf8","modified":1576114432018},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1576114432020},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1576114432022},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff2","hash":"0592332e221316fd8331110568df461e87689cca","modified":1576114432024},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.eot","hash":"88cae9d47326f77e37a521e08f4445526eb1a4c9","modified":1576114432025},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.svg","hash":"21aec1663a5b5b311e094735da407018ac2f97cc","modified":1576114432026},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.ttf","hash":"888487c710f152616af17d7d5bbcd74a2953a391","modified":1576114432026},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff","hash":"adfa5ab1a81df7c353613492f54e125244b22da2","modified":1576114432026},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff2","hash":"bba0df4d71619c06cb34700c2a8eaa72ddd87a2b","modified":1576114432026},{"_id":"themes/materialized/source/icons/material-icons/LICENSE.txt","hash":"e9101bd4e253c0f7da54e8f581cf72322df10162","modified":1576114432027},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.ijmap","hash":"df468e87685c24b2a5d431036d4d5a434efdc28e","modified":1576114432027},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1576114432028},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1576114432028},{"_id":"themes/materialized/source/images/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1576114432030},{"_id":"themes/materialized/source/images/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1576114432031},{"_id":"themes/materialized/source/images/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1576114432034},{"_id":"themes/materialized/source/images/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1576114432035},{"_id":"themes/materialized/source/images/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1576114432036},{"_id":"themes/materialized/source/images/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1576114432037},{"_id":"themes/materialized/source/images/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1576114432037},{"_id":"themes/materialized/source/images/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1576114432039},{"_id":"themes/materialized/source/images/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1576114432039},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff","hash":"100a2d03d89a0e3e027a1500e4f4d715d1ed52a0","modified":1576114432012},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff2","hash":"36dd174e41242ff6318083409f7e6c700b25eba2","modified":1576114432012},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff","hash":"d2f8acc7e66ff51cc180bd998056e68dec30b8c6","modified":1576114432013},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff","hash":"274d0176d3b2e324111d0f836625960bdf24a29a","modified":1576114432014},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff2","hash":"45dc6a6ae29b2522ac98fc130d300d1c3ceee9b4","modified":1576114432013},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff","hash":"83739a927323a1c00a5e61ef6da84fff9e15fbc8","modified":1576114432016},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff2","hash":"99eaed1b19b50aeb3866d9ce568c290d15c965fb","modified":1576114432017},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff","hash":"d6d654d36c6cf9053675860d00125d6c543560d8","modified":1576114432017},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff","hash":"184f1fc46df99866d5dbe03b57f3f6d9b9981ea0","modified":1576114432019},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff2","hash":"d72aa4d470b5923b3f614dd8ca25fd230dda8206","modified":1576114432019},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff","hash":"d3564215ac8f29bbf8c3d0602e1299ebcbe26ea9","modified":1576114432020},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff","hash":"b1afeefecbee33ad50452ce3f728dfcf781c9d49","modified":1576114432021},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff2","hash":"2fbd77f1d63c3d339167aa754e716451d129e23f","modified":1576114432021},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff","hash":"db6450746e5df1eb0636bc84f21aae94e1cafea4","modified":1576114432022},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff","hash":"f3c32fd38c2f5fe34e54bdab2f238e469f48501a","modified":1576114432023},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff2","hash":"bd9360a27d99a093c2f06857c21fd6e98b57a8c0","modified":1576114432023},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff","hash":"2d1c0c4d3ff8f91941499790d4fd63866e7c4852","modified":1576114432024},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff2","hash":"cf2e6e6e462a4ff1c980d2c0fdc7b9675a30c82b","modified":1576114432025},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff","hash":"ea71e1a7f20df5de8048e06c70d0b756b83f867e","modified":1576114432025},{"_id":"themes/materialized/source/images/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1576114432030},{"_id":"themes/materialized/source/images/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1576114432031},{"_id":"themes/materialized/source/images/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1576114432032},{"_id":"themes/materialized/source/images/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1576114432032},{"_id":"themes/materialized/source/images/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1576114432033},{"_id":"themes/materialized/source/images/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1576114432034},{"_id":"themes/materialized/source/images/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1576114432035},{"_id":"themes/materialized/source/images/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1576114432036},{"_id":"themes/materialized/source/images/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1576114432037},{"_id":"themes/materialized/source/images/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1576114432038},{"_id":"themes/materialized/source/js/mdui.js","hash":"f85c02f85d45257a1a283c066878c6bccbe7927c","modified":1576114432040},{"_id":"themes/materialized/.git/logs/refs/heads/master","hash":"8ea964bf0f06fd77a9f17957e0c1461fa72beb97","modified":1575978091950},{"_id":"themes/materialized/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1576114431998},{"_id":"themes/materialized/.git/logs/refs/remotes/origin/HEAD","hash":"8ea964bf0f06fd77a9f17957e0c1461fa72beb97","modified":1575978091949},{"_id":"themes/materialized/source/css/mdui.css","hash":"11491e5bece560ec714802ba921a17cb3eb6ace7","modified":1576114432010},{"_id":"themes/materialized/.git/objects/pack/pack-faf319aafa8fa7ac4b5ed9508e545f1a8a956775.pack","hash":"be3e0866bb79b71ce81805a27ddac1b447ff4b4b","modified":1576114431987},{"_id":"public/images/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1576114454635},{"_id":"public/images/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1576114454635},{"_id":"public/images/grey.png","hash":"4562825d902a6cdb6414c75bfad492d98584c63a","modified":1576114454635},{"_id":"public/fonts/roboto/LICENSE.txt","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Light.woff2","hash":"df835660087fc7421a7667d8b68d759e0e1dbbf8","modified":1576114454635},{"_id":"public/icons/custom-icons/iconfont.eot","hash":"88cae9d47326f77e37a521e08f4445526eb1a4c9","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1576114454635},{"_id":"public/icons/custom-icons/iconfont.svg","hash":"21aec1663a5b5b311e094735da407018ac2f97cc","modified":1576114454635},{"_id":"public/icons/custom-icons/iconfont.ttf","hash":"888487c710f152616af17d7d5bbcd74a2953a391","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Thin.woff2","hash":"0592332e221316fd8331110568df461e87689cca","modified":1576114454635},{"_id":"public/icons/custom-icons/iconfont.woff","hash":"adfa5ab1a81df7c353613492f54e125244b22da2","modified":1576114454635},{"_id":"public/icons/custom-icons/iconfont.woff2","hash":"bba0df4d71619c06cb34700c2a8eaa72ddd87a2b","modified":1576114454635},{"_id":"public/icons/material-icons/LICENSE.txt","hash":"e9101bd4e253c0f7da54e8f581cf72322df10162","modified":1576114454635},{"_id":"public/icons/material-icons/MaterialIcons-Regular.ijmap","hash":"df468e87685c24b2a5d431036d4d5a434efdc28e","modified":1576114454635},{"_id":"public/icons/material-icons/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1576114454635},{"_id":"public/icons/material-icons/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1576114454635},{"_id":"public/images/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1576114454635},{"_id":"public/images/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1576114454635},{"_id":"public/images/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1576114454635},{"_id":"public/images/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1576114454635},{"_id":"public/images/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1576114454635},{"_id":"public/images/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1576114454635},{"_id":"public/images/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1576114454635},{"_id":"public/images/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1576114454635},{"_id":"public/images/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Black.woff2","hash":"36dd174e41242ff6318083409f7e6c700b25eba2","modified":1576114454635},{"_id":"public/images/banner.png","hash":"09dc164e22c87a9d736d625f0887b4bc33e7477e","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Black.woff","hash":"100a2d03d89a0e3e027a1500e4f4d715d1ed52a0","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-BlackItalic.woff","hash":"d2f8acc7e66ff51cc180bd998056e68dec30b8c6","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Bold.woff","hash":"274d0176d3b2e324111d0f836625960bdf24a29a","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-BlackItalic.woff2","hash":"45dc6a6ae29b2522ac98fc130d300d1c3ceee9b4","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-BoldItalic.woff2","hash":"99eaed1b19b50aeb3866d9ce568c290d15c965fb","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-BoldItalic.woff","hash":"83739a927323a1c00a5e61ef6da84fff9e15fbc8","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Light.woff","hash":"d6d654d36c6cf9053675860d00125d6c543560d8","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-LightItalic.woff","hash":"184f1fc46df99866d5dbe03b57f3f6d9b9981ea0","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Medium.woff","hash":"d3564215ac8f29bbf8c3d0602e1299ebcbe26ea9","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-LightItalic.woff2","hash":"d72aa4d470b5923b3f614dd8ca25fd230dda8206","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-MediumItalic.woff","hash":"b1afeefecbee33ad50452ce3f728dfcf781c9d49","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-MediumItalic.woff2","hash":"2fbd77f1d63c3d339167aa754e716451d129e23f","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Regular.woff","hash":"db6450746e5df1eb0636bc84f21aae94e1cafea4","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-RegularItalic.woff","hash":"f3c32fd38c2f5fe34e54bdab2f238e469f48501a","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-Thin.woff","hash":"2d1c0c4d3ff8f91941499790d4fd63866e7c4852","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-RegularItalic.woff2","hash":"bd9360a27d99a093c2f06857c21fd6e98b57a8c0","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-ThinItalic.woff2","hash":"cf2e6e6e462a4ff1c980d2c0fdc7b9675a30c82b","modified":1576114454635},{"_id":"public/fonts/roboto/Roboto-ThinItalic.woff","hash":"ea71e1a7f20df5de8048e06c70d0b756b83f867e","modified":1576114454635},{"_id":"public/images/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1576114454635},{"_id":"public/images/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1576114454635},{"_id":"public/images/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1576114454635},{"_id":"public/images/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1576114454635},{"_id":"public/images/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1576114454635},{"_id":"public/images/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1576114454635},{"_id":"public/images/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1576114454635},{"_id":"public/images/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1576114454635},{"_id":"public/images/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1576114454635},{"_id":"public/images/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1576114454635},{"_id":"public/css/style.css","hash":"b57fd777fc8a48bc416fbc37f42796403ad19cd2","modified":1576114454635},{"_id":"public/js/script.js","hash":"d17a7fd70cf423a52dd1a405ca5009e004dd074e","modified":1576114454635},{"_id":"public/js/mdui.js","hash":"f85c02f85d45257a1a283c066878c6bccbe7927c","modified":1576114454635},{"_id":"public/css/mdui.css","hash":"11491e5bece560ec714802ba921a17cb3eb6ace7","modified":1576114454635},{"_id":"source/_posts/深夜杂谈.md","hash":"7c086f544845d6c72ea68522d6a7e9eb4dd5c368","modified":1576207400713},{"_id":"public/2019/12/11/深夜杂谈/index.html","hash":"154c3c894bf76b34c93ef28797466f7d1b04a334","modified":1576207579186},{"_id":"public/tags/杂谈/index.html","hash":"d0a98fbdb58d71fa1ae1cfd71c915d8228b1b8a1","modified":1576228848676},{"_id":"source/_posts/midnight_talk.md","hash":"b7b189611db4a59dc086f36655b0437d40ec04ee","modified":1576229294134},{"_id":"public/2019/12/13/midnight_talk/index.html","hash":"d709e41803b4cf65e98b4992a8b29497d8265821","modified":1576237653576},{"_id":"source/_posts/.DS_Store","hash":"7a1b66de02186be56062a4f6d7a47833a59e1e0b","modified":1576234877827},{"_id":"source/_posts/技术/.DS_Store","hash":"50075dd59a60fbe7ae9a228c26ac34fdc090fb40","modified":1576228778297},{"_id":"source/_posts/技术/算法/重建二叉树.md","hash":"aa4f08ffa1e4f44ef40f69fe081824f40c5ff2b8","modified":1576228742396},{"_id":"public/2019/12/13/技术/算法/重建二叉树/index.html","hash":"3735f6d0efca97fea93bb5a2c2cafec264de1546","modified":1576228848676},{"_id":"source/_posts/rebuildBinaryTree.md","hash":"e784fd0fdef85dd3243b6f37321986dd0cf2469c","modified":1576230570601},{"_id":"source/_posts/bubblingSort.md","hash":"182423e485e76615a6e69d50419477746b876f62","modified":1576230674064},{"_id":"source/_posts/mergeSort.md","hash":"0afdd61eb967e4897066c15df1252bd377f2eea6","modified":1576230680100},{"_id":"source/_posts/shunzi.md","hash":"f9346d1209a5fd52291ffb70c101797c61ed335c","modified":1576230699220},{"_id":"source/_posts/quickSort.md","hash":"f23e3642728335fc31b9ee0374ceb991f951d225","modified":1576230690611},{"_id":"source/_posts/selectSort.md","hash":"73e0e997e302b2aafe09cdb8425ee4af6ca6108e","modified":1576230704827},{"_id":"source/_posts/getMinStack.md","hash":"43e8e95cc2965e04a74063d7da6bf2c7552e8f75","modified":1576231404632},{"_id":"source/_posts/unitTest2.md","hash":"a9c9ef21be5d73d0ebbdd1e45e9c2c85632d2b71","modified":1576234612272},{"_id":"source/_posts/unitTest3.md","hash":"7e6e7557a81ac4f3216b0e6cc53fa9a1f990b75b","modified":1576234637851},{"_id":"source/_posts/unitTest1.md","hash":"4b3804e6a5765ba5c0b0e2a7fb2a82c19634ce48","modified":1576234617278},{"_id":"source/_posts/unitTest4.md","hash":"68e51c28b98c154df89f582c8792615e21af7293","modified":1576234652053},{"_id":"source/_posts/unitTest4/unittest4-1.png","hash":"09ff6680c3cf36ac324d16f0867556b5cbfc73a1","modified":1576233834144},{"_id":"source/_posts/unitTest2/unitTest2-1.png","hash":"6ab9e9ba6376d2412131432e0348deb7404da148","modified":1576237367425},{"_id":"source/_posts/unitTest2/unitTest2-2.png","hash":"d5d90d918e46f1208e44fbd9efa6dafb7d390ac2","modified":1576237408408},{"_id":"source/_posts/unitTest4/unittest4-2.png","hash":"ad36be95b6851c9967572816dfb42abc0e742943","modified":1576233917582},{"_id":"public/categories/杂谈/index.html","hash":"5d10c7c5c0ede72109fcd95d021d6de6a67af097","modified":1576237653576},{"_id":"public/categories/Android/index.html","hash":"9e282091b07d4bf14e34f498712e4fec00211cb3","modified":1576237653576},{"_id":"public/archives/page/2/index.html","hash":"423dd58486c3d452a0056d73a0e36335e0cacbc5","modified":1576237653576},{"_id":"public/archives/2017/page/2/index.html","hash":"94e50b9281ef2bc979e09e76c2f06472b9f322c4","modified":1576237653576},{"_id":"public/archives/2017/03/index.html","hash":"681672b9333ec5deea3b570200bb2e425dc4f68c","modified":1576237653576},{"_id":"public/page/2/index.html","hash":"f9c0dd06e6ef880ea741223cc3fdce4b602b0019","modified":1576237653576},{"_id":"public/tags/二叉树/index.html","hash":"3228f76ff27b9eeb66aab6a92dac3cfe2d7369ee","modified":1576237653576},{"_id":"public/tags/哲学/index.html","hash":"5994376b3ed6bd581a7f7a4c4830c2958168e094","modified":1576237653576},{"_id":"public/tags/排序/index.html","hash":"f1870ce361c1228e50ead6abd1eb16007195d8b2","modified":1576237653576},{"_id":"public/tags/算法题/index.html","hash":"93bdada716f0a332316cb000bdd68024547abcee","modified":1576237653576},{"_id":"public/tags/数据结构/index.html","hash":"1644ad61b4b47135d602e0ca20e98c516dd4439b","modified":1576237653576},{"_id":"public/tags/单元测试/index.html","hash":"a4641ad9d4e3a9f6151b584dcf044b42a2d18ca9","modified":1576237653576},{"_id":"public/2017/03/05/unitTest4/index.html","hash":"b0b665900e0e29ed1994d3234c8d4c69a88638ed","modified":1576237653576},{"_id":"public/2017/03/05/unitTest3/index.html","hash":"903ef59248c4804cf23bb8fec3b78ea160dcb4d3","modified":1576237653576},{"_id":"public/2017/03/05/unitTest2/index.html","hash":"4e5ffe215493f8b656067b1075ab761d84b161ac","modified":1576237653576},{"_id":"public/2017/03/04/unitTest1/index.html","hash":"d769cf92e97d037b93c0812addd135003205cd3d","modified":1576237653576},{"_id":"public/2017/01/05/getMinStack/index.html","hash":"b0a240d0c37910951e75902a92ff171264633ebe","modified":1576237653576},{"_id":"public/2017/01/04/selectSort/index.html","hash":"158c2f4d30f9d01087839a1cbc000fe2c8308048","modified":1576237653576},{"_id":"public/2017/01/04/quickSort/index.html","hash":"8309fd1d1826a2d436e83b8bc2bef733dae00d8a","modified":1576237653576},{"_id":"public/2017/01/04/mergeSort/index.html","hash":"82fb2da58d6829145741ba7f9e743624fe1da033","modified":1576237653576},{"_id":"public/2017/01/04/shunzi/index.html","hash":"0872e02d869f6d28c85a04d2c61ab59eb93411d3","modified":1576237653576},{"_id":"public/2017/01/03/bubblingSort/index.html","hash":"dc9ce0f8e6f854b767b4417344104c598ecf9185","modified":1576237653576},{"_id":"public/2017/01/03/rebuildBinaryTree/index.html","hash":"879ebcbdc275b7858c978ed53944ed000f934484","modified":1576237653576},{"_id":"public/categories/算法/index.html","hash":"b6ca9e65ce879b45cf822b29a67ff1e846ff5507","modified":1576237653576},{"_id":"public/archives/2017/index.html","hash":"ca41885c5436110617c32efe8f8f414b24a794b8","modified":1576237653576},{"_id":"public/archives/2017/01/index.html","hash":"6bf673cfe64c6bba6cfa99e45631b970f3bbdca4","modified":1576237653576},{"_id":"public/2017/03/05/unitTest2/unitTest2-1.png","hash":"6ab9e9ba6376d2412131432e0348deb7404da148","modified":1576237653576},{"_id":"public/2017/03/05/unitTest4/unittest4-1.png","hash":"09ff6680c3cf36ac324d16f0867556b5cbfc73a1","modified":1576237653576},{"_id":"public/2017/03/05/unitTest2/unitTest2-2.png","hash":"d5d90d918e46f1208e44fbd9efa6dafb7d390ac2","modified":1576237653576},{"_id":"public/2017/03/05/unitTest4/unittest4-2.png","hash":"ad36be95b6851c9967572816dfb42abc0e742943","modified":1576237653576}],"Category":[{"name":"算法","_id":"ck43y8ihr0001sel9brsr6zk1"},{"name":"杂谈","_id":"ck43y8ijc0005sel95mebd2fo"},{"name":"Android","_id":"ck441f4nu0004inl9hddybsiq"}],"Data":[],"Page":[],"Post":[{"title":"深夜杂谈","date":"2019-12-12T17:40:06.000Z","_content":"\n## <center>深夜杂谈</center>\n\n​        孔子说自己四十而不惑，但现代人接受知识和信息的速度比孔子那个时候快了百倍千倍不止，四十不惑已经满足不了我们的需要了。不过如果有人能在自己年轻的时候就确立自己的信仰找到人生的方向那确实是一件幸事。\n\n#### 大学时期的志向\n\n​        还记得我大一下学期的时候跟着一个师姐学演讲，休息的时候她问我想成为一个什么样的人，我说我想成为一个有思想的人。她问我什么叫有思想，我说我不知道，但我会努力探索。\n\n​        在大学图书馆里，我发现了一本薄薄的小册子，对我影响十分深远，书名《你的第一本哲学书》，这本书已经绝版，我后来只买到了一本影印版。整本书提炼出一句话就是：我们人认知这个世界的通道十分有限（视觉、听觉、触觉等），所以自然条件下我们对世界的认知是片面的扭曲的。因此我曾对舍友吐槽，为什么这个世界总是和我想象中的不一样，原因也是在此。我们看到的世界只是冰山一角，而且还是扭曲过的。\n\n怎么样才能认识到真正的世界呢？大学四年我没有找到满意的答案，但总体还是有些收获。我看了很多书，听了很多带给我启发的课。我读了张德芬的《遇见未知的自己》、薛兆丰的《经济学通识》、尼采的《查拉图斯特拉如是说》、梁漱溟的《孔孟》，听了哲学系历史系的老师开的公开选修课，但学的东西越多，困惑就越多，脑子也越混乱，思想也开始混乱，不左不右，一会儿唯心一会儿唯物的。就这样迷迷糊糊带着所有疑问走出了校园，进入社会。\n\n#### 26岁的生日\n\n​        26岁是我一生中最重要的一年，我解除了大学时期遗留的困惑，这得益于一本书和一个事件。这本书叫《超越感觉——批判性思维指南》提炼出一句话就是：这个世界上有很多有心无心的发表对客观世界进行扭曲的描述来影响他人，想要减轻此影响需要有批判的武器。而一个事件就是2019年有名的996.icu运动，在这个事件中我深刻理解到了阶级斗争。对，这个在我们历史和政治课本出现过多次的词语，我到现在才真正体会到，原因也很简单，从小到大在家庭的呵护中长大，大学又是一个象牙塔，又怎么能理解什么叫阶级呢。\n\n​        前段时间有和一个人大读研的学妹探讨宗教问题，我认为宗教随着时代发展必然会被丢进历史的垃圾堆里。而如此浅显的道理在人大这所高校里面却没有达成共识，学妹甚至质疑：马克思曾说宗教和人的解放不冲突。什么叫做断章取义，这不就是么，高校就是一所象牙塔，是既得利益者把控舆论的高地，根本不适合作为探讨社会科学的场所。据我学妹的描述，哲学院的老师大多是唯心的，甚至有宗教信仰，喜欢在上课的时候灌鸡汤。更有甚者歪曲历史鼓吹西方民主，我上学遇到过一个教授当众质疑朝鲜战争的革命意义，甚至贬低革命领袖，我还遇到过一个大学老师鼓吹在美国可以在白宫门外说奥巴马你是一只猴（当时特朗普还没上台）借此鼓吹西方国家的自由民主。\n\n​        所以我说现在的大学生跟当年五四运动的大学生相比根本不是一个概念，根本无法代表先进文化，他们成长之路倍受呵护，但心灵成长之路危机四伏，说到这里读者应该能明白所谓港废是怎么产生的了吧。最近大学生自杀事件挺多的，前几周人大一个女生硕士因工作压力自杀，昨天又爆出新闻北大女生因恋爱问题服药自杀，这两个事件我认为非常典型可以放在一起看，我们不要再去追究到底谁该为死者负责了，这是社会发展到现在必然要面对的社会学难题。这是精神文明的建设远远落后于物质文明建设所酿成的恶果，物质文明建设的辉煌成果大家有目共睹，但我们的精神生活是多么的不堪呢？大学生有大把的闲暇时间在干嘛呢？在刷网剧，追综艺，看网络小说，而这些真的是好的文化产品吗？答案是否定的，这些产品扭曲了这些温室花朵一般的大学生的世界观，现在大学生的典型特点就是自我为中心，将爱情极端神圣化。拿北大女生举例，遇见渣男并不可怕，但如果把他当成命中注定，认为爱情的失去就是人生意义的失去，走进了这样的死胡同是最可怕的。你所处的境遇会给你带来有限的伤害，但更可怕的是境遇对你的认知产生影响从而引发的自我否定，这会对你产生无穷的伤害。\n\n​        那到底什么叫有思想呢？怎么才能叫做不惑呢？思考几个我们经常听到的几个哲学问题：你是谁，你从哪里来，要到哪里去。这个问题并不难，没有什么高深的学问，只需要掌握高中甚至初中水平的知识，再加上对社会有一定的接触就够了。语数外是我们认知世界的基础，这很好理解，有了语言我们才能获取知识和信息，而数学是现代科学最基础的分析工具。而理化生这些理科是近代以来人类对物理世界客观规律的探索的集大成者。文科中最重要的是历史，告诉你人类的产生与发展，回答了我从哪里来的问题。政治课告诉我们人与社会，经济，文化之间的相互作用关系。一个国家或者地区的地理条件微观上直接决定一个社会群体的经济政治走向，宏观上在国与国之间产生地缘政治从而影响国际关系的发展。政治和地理间接回答了我是谁的问题。一个人学好了历史和理科知识，他就对物理世界和人文世界有了清晰的认知，这些认知构成了世界观，世界观能够系统的回答我从哪儿来。以世界观为基础，找准自己在世界之中的位置，这就回答了我是谁，这也是人生观。以前两者为基础，你会清晰的看到历史前进的方向，你也会找准未来自己应当处于什么位置，这就回答了我要到哪儿去的问题，这就是价值观。年龄越大越发觉九年义务教育中所学的东西是多么的宝贵，这是社会主义带给我们的最廉价的同时又是弥足珍贵的礼物。\n\n​        26岁是我人生中意义非凡的一年，在这年的生日上我许下愿望，希望自己在正确的道路上走的更远。\n\n#### 南京大屠杀纪念日\n\n​        今天南京大屠杀纪念日，82年前，1937年12月13日，侵华日军制造了惨绝人寰的南京大屠杀惨案。30万同胞惨遭杀戮，无数家庭支离破碎。有些人会试图掩盖，有些人似乎已经遗忘，但有些人会时刻铭记。\n\n​        向战争中遇难同胞致哀。\n","source":"_posts/midnight_talk.md","raw":"---\n\ntitle: 深夜杂谈\ndate: 2019-12-13 01:40:06\ncategories: 杂谈\ntag: 哲学\n---\n\n## <center>深夜杂谈</center>\n\n​        孔子说自己四十而不惑，但现代人接受知识和信息的速度比孔子那个时候快了百倍千倍不止，四十不惑已经满足不了我们的需要了。不过如果有人能在自己年轻的时候就确立自己的信仰找到人生的方向那确实是一件幸事。\n\n#### 大学时期的志向\n\n​        还记得我大一下学期的时候跟着一个师姐学演讲，休息的时候她问我想成为一个什么样的人，我说我想成为一个有思想的人。她问我什么叫有思想，我说我不知道，但我会努力探索。\n\n​        在大学图书馆里，我发现了一本薄薄的小册子，对我影响十分深远，书名《你的第一本哲学书》，这本书已经绝版，我后来只买到了一本影印版。整本书提炼出一句话就是：我们人认知这个世界的通道十分有限（视觉、听觉、触觉等），所以自然条件下我们对世界的认知是片面的扭曲的。因此我曾对舍友吐槽，为什么这个世界总是和我想象中的不一样，原因也是在此。我们看到的世界只是冰山一角，而且还是扭曲过的。\n\n怎么样才能认识到真正的世界呢？大学四年我没有找到满意的答案，但总体还是有些收获。我看了很多书，听了很多带给我启发的课。我读了张德芬的《遇见未知的自己》、薛兆丰的《经济学通识》、尼采的《查拉图斯特拉如是说》、梁漱溟的《孔孟》，听了哲学系历史系的老师开的公开选修课，但学的东西越多，困惑就越多，脑子也越混乱，思想也开始混乱，不左不右，一会儿唯心一会儿唯物的。就这样迷迷糊糊带着所有疑问走出了校园，进入社会。\n\n#### 26岁的生日\n\n​        26岁是我一生中最重要的一年，我解除了大学时期遗留的困惑，这得益于一本书和一个事件。这本书叫《超越感觉——批判性思维指南》提炼出一句话就是：这个世界上有很多有心无心的发表对客观世界进行扭曲的描述来影响他人，想要减轻此影响需要有批判的武器。而一个事件就是2019年有名的996.icu运动，在这个事件中我深刻理解到了阶级斗争。对，这个在我们历史和政治课本出现过多次的词语，我到现在才真正体会到，原因也很简单，从小到大在家庭的呵护中长大，大学又是一个象牙塔，又怎么能理解什么叫阶级呢。\n\n​        前段时间有和一个人大读研的学妹探讨宗教问题，我认为宗教随着时代发展必然会被丢进历史的垃圾堆里。而如此浅显的道理在人大这所高校里面却没有达成共识，学妹甚至质疑：马克思曾说宗教和人的解放不冲突。什么叫做断章取义，这不就是么，高校就是一所象牙塔，是既得利益者把控舆论的高地，根本不适合作为探讨社会科学的场所。据我学妹的描述，哲学院的老师大多是唯心的，甚至有宗教信仰，喜欢在上课的时候灌鸡汤。更有甚者歪曲历史鼓吹西方民主，我上学遇到过一个教授当众质疑朝鲜战争的革命意义，甚至贬低革命领袖，我还遇到过一个大学老师鼓吹在美国可以在白宫门外说奥巴马你是一只猴（当时特朗普还没上台）借此鼓吹西方国家的自由民主。\n\n​        所以我说现在的大学生跟当年五四运动的大学生相比根本不是一个概念，根本无法代表先进文化，他们成长之路倍受呵护，但心灵成长之路危机四伏，说到这里读者应该能明白所谓港废是怎么产生的了吧。最近大学生自杀事件挺多的，前几周人大一个女生硕士因工作压力自杀，昨天又爆出新闻北大女生因恋爱问题服药自杀，这两个事件我认为非常典型可以放在一起看，我们不要再去追究到底谁该为死者负责了，这是社会发展到现在必然要面对的社会学难题。这是精神文明的建设远远落后于物质文明建设所酿成的恶果，物质文明建设的辉煌成果大家有目共睹，但我们的精神生活是多么的不堪呢？大学生有大把的闲暇时间在干嘛呢？在刷网剧，追综艺，看网络小说，而这些真的是好的文化产品吗？答案是否定的，这些产品扭曲了这些温室花朵一般的大学生的世界观，现在大学生的典型特点就是自我为中心，将爱情极端神圣化。拿北大女生举例，遇见渣男并不可怕，但如果把他当成命中注定，认为爱情的失去就是人生意义的失去，走进了这样的死胡同是最可怕的。你所处的境遇会给你带来有限的伤害，但更可怕的是境遇对你的认知产生影响从而引发的自我否定，这会对你产生无穷的伤害。\n\n​        那到底什么叫有思想呢？怎么才能叫做不惑呢？思考几个我们经常听到的几个哲学问题：你是谁，你从哪里来，要到哪里去。这个问题并不难，没有什么高深的学问，只需要掌握高中甚至初中水平的知识，再加上对社会有一定的接触就够了。语数外是我们认知世界的基础，这很好理解，有了语言我们才能获取知识和信息，而数学是现代科学最基础的分析工具。而理化生这些理科是近代以来人类对物理世界客观规律的探索的集大成者。文科中最重要的是历史，告诉你人类的产生与发展，回答了我从哪里来的问题。政治课告诉我们人与社会，经济，文化之间的相互作用关系。一个国家或者地区的地理条件微观上直接决定一个社会群体的经济政治走向，宏观上在国与国之间产生地缘政治从而影响国际关系的发展。政治和地理间接回答了我是谁的问题。一个人学好了历史和理科知识，他就对物理世界和人文世界有了清晰的认知，这些认知构成了世界观，世界观能够系统的回答我从哪儿来。以世界观为基础，找准自己在世界之中的位置，这就回答了我是谁，这也是人生观。以前两者为基础，你会清晰的看到历史前进的方向，你也会找准未来自己应当处于什么位置，这就回答了我要到哪儿去的问题，这就是价值观。年龄越大越发觉九年义务教育中所学的东西是多么的宝贵，这是社会主义带给我们的最廉价的同时又是弥足珍贵的礼物。\n\n​        26岁是我人生中意义非凡的一年，在这年的生日上我许下愿望，希望自己在正确的道路上走的更远。\n\n#### 南京大屠杀纪念日\n\n​        今天南京大屠杀纪念日，82年前，1937年12月13日，侵华日军制造了惨绝人寰的南京大屠杀惨案。30万同胞惨遭杀戮，无数家庭支离破碎。有些人会试图掩盖，有些人似乎已经遗忘，但有些人会时刻铭记。\n\n​        向战争中遇难同胞致哀。\n","slug":"midnight_talk","published":1,"updated":"2019-12-13T09:28:14.134Z","_id":"ck43lf6gi00009hl929glfumy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深夜杂谈\"><a href=\"#深夜杂谈\" class=\"headerlink\" title=\"深夜杂谈\"></a><center>深夜杂谈</center></h2><p>​        孔子说自己四十而不惑，但现代人接受知识和信息的速度比孔子那个时候快了百倍千倍不止，四十不惑已经满足不了我们的需要了。不过如果有人能在自己年轻的时候就确立自己的信仰找到人生的方向那确实是一件幸事。</p>\n<h4 id=\"大学时期的志向\"><a href=\"#大学时期的志向\" class=\"headerlink\" title=\"大学时期的志向\"></a>大学时期的志向</h4><p>​        还记得我大一下学期的时候跟着一个师姐学演讲，休息的时候她问我想成为一个什么样的人，我说我想成为一个有思想的人。她问我什么叫有思想，我说我不知道，但我会努力探索。</p>\n<p>​        在大学图书馆里，我发现了一本薄薄的小册子，对我影响十分深远，书名《你的第一本哲学书》，这本书已经绝版，我后来只买到了一本影印版。整本书提炼出一句话就是：我们人认知这个世界的通道十分有限（视觉、听觉、触觉等），所以自然条件下我们对世界的认知是片面的扭曲的。因此我曾对舍友吐槽，为什么这个世界总是和我想象中的不一样，原因也是在此。我们看到的世界只是冰山一角，而且还是扭曲过的。</p>\n<p>怎么样才能认识到真正的世界呢？大学四年我没有找到满意的答案，但总体还是有些收获。我看了很多书，听了很多带给我启发的课。我读了张德芬的《遇见未知的自己》、薛兆丰的《经济学通识》、尼采的《查拉图斯特拉如是说》、梁漱溟的《孔孟》，听了哲学系历史系的老师开的公开选修课，但学的东西越多，困惑就越多，脑子也越混乱，思想也开始混乱，不左不右，一会儿唯心一会儿唯物的。就这样迷迷糊糊带着所有疑问走出了校园，进入社会。</p>\n<h4 id=\"26岁的生日\"><a href=\"#26岁的生日\" class=\"headerlink\" title=\"26岁的生日\"></a>26岁的生日</h4><p>​        26岁是我一生中最重要的一年，我解除了大学时期遗留的困惑，这得益于一本书和一个事件。这本书叫《超越感觉——批判性思维指南》提炼出一句话就是：这个世界上有很多有心无心的发表对客观世界进行扭曲的描述来影响他人，想要减轻此影响需要有批判的武器。而一个事件就是2019年有名的996.icu运动，在这个事件中我深刻理解到了阶级斗争。对，这个在我们历史和政治课本出现过多次的词语，我到现在才真正体会到，原因也很简单，从小到大在家庭的呵护中长大，大学又是一个象牙塔，又怎么能理解什么叫阶级呢。</p>\n<p>​        前段时间有和一个人大读研的学妹探讨宗教问题，我认为宗教随着时代发展必然会被丢进历史的垃圾堆里。而如此浅显的道理在人大这所高校里面却没有达成共识，学妹甚至质疑：马克思曾说宗教和人的解放不冲突。什么叫做断章取义，这不就是么，高校就是一所象牙塔，是既得利益者把控舆论的高地，根本不适合作为探讨社会科学的场所。据我学妹的描述，哲学院的老师大多是唯心的，甚至有宗教信仰，喜欢在上课的时候灌鸡汤。更有甚者歪曲历史鼓吹西方民主，我上学遇到过一个教授当众质疑朝鲜战争的革命意义，甚至贬低革命领袖，我还遇到过一个大学老师鼓吹在美国可以在白宫门外说奥巴马你是一只猴（当时特朗普还没上台）借此鼓吹西方国家的自由民主。</p>\n<p>​        所以我说现在的大学生跟当年五四运动的大学生相比根本不是一个概念，根本无法代表先进文化，他们成长之路倍受呵护，但心灵成长之路危机四伏，说到这里读者应该能明白所谓港废是怎么产生的了吧。最近大学生自杀事件挺多的，前几周人大一个女生硕士因工作压力自杀，昨天又爆出新闻北大女生因恋爱问题服药自杀，这两个事件我认为非常典型可以放在一起看，我们不要再去追究到底谁该为死者负责了，这是社会发展到现在必然要面对的社会学难题。这是精神文明的建设远远落后于物质文明建设所酿成的恶果，物质文明建设的辉煌成果大家有目共睹，但我们的精神生活是多么的不堪呢？大学生有大把的闲暇时间在干嘛呢？在刷网剧，追综艺，看网络小说，而这些真的是好的文化产品吗？答案是否定的，这些产品扭曲了这些温室花朵一般的大学生的世界观，现在大学生的典型特点就是自我为中心，将爱情极端神圣化。拿北大女生举例，遇见渣男并不可怕，但如果把他当成命中注定，认为爱情的失去就是人生意义的失去，走进了这样的死胡同是最可怕的。你所处的境遇会给你带来有限的伤害，但更可怕的是境遇对你的认知产生影响从而引发的自我否定，这会对你产生无穷的伤害。</p>\n<p>​        那到底什么叫有思想呢？怎么才能叫做不惑呢？思考几个我们经常听到的几个哲学问题：你是谁，你从哪里来，要到哪里去。这个问题并不难，没有什么高深的学问，只需要掌握高中甚至初中水平的知识，再加上对社会有一定的接触就够了。语数外是我们认知世界的基础，这很好理解，有了语言我们才能获取知识和信息，而数学是现代科学最基础的分析工具。而理化生这些理科是近代以来人类对物理世界客观规律的探索的集大成者。文科中最重要的是历史，告诉你人类的产生与发展，回答了我从哪里来的问题。政治课告诉我们人与社会，经济，文化之间的相互作用关系。一个国家或者地区的地理条件微观上直接决定一个社会群体的经济政治走向，宏观上在国与国之间产生地缘政治从而影响国际关系的发展。政治和地理间接回答了我是谁的问题。一个人学好了历史和理科知识，他就对物理世界和人文世界有了清晰的认知，这些认知构成了世界观，世界观能够系统的回答我从哪儿来。以世界观为基础，找准自己在世界之中的位置，这就回答了我是谁，这也是人生观。以前两者为基础，你会清晰的看到历史前进的方向，你也会找准未来自己应当处于什么位置，这就回答了我要到哪儿去的问题，这就是价值观。年龄越大越发觉九年义务教育中所学的东西是多么的宝贵，这是社会主义带给我们的最廉价的同时又是弥足珍贵的礼物。</p>\n<p>​        26岁是我人生中意义非凡的一年，在这年的生日上我许下愿望，希望自己在正确的道路上走的更远。</p>\n<h4 id=\"南京大屠杀纪念日\"><a href=\"#南京大屠杀纪念日\" class=\"headerlink\" title=\"南京大屠杀纪念日\"></a>南京大屠杀纪念日</h4><p>​        今天南京大屠杀纪念日，82年前，1937年12月13日，侵华日军制造了惨绝人寰的南京大屠杀惨案。30万同胞惨遭杀戮，无数家庭支离破碎。有些人会试图掩盖，有些人似乎已经遗忘，但有些人会时刻铭记。</p>\n<p>​        向战争中遇难同胞致哀。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"深夜杂谈\"><a href=\"#深夜杂谈\" class=\"headerlink\" title=\"深夜杂谈\"></a><center>深夜杂谈</center></h2><p>​        孔子说自己四十而不惑，但现代人接受知识和信息的速度比孔子那个时候快了百倍千倍不止，四十不惑已经满足不了我们的需要了。不过如果有人能在自己年轻的时候就确立自己的信仰找到人生的方向那确实是一件幸事。</p>\n<h4 id=\"大学时期的志向\"><a href=\"#大学时期的志向\" class=\"headerlink\" title=\"大学时期的志向\"></a>大学时期的志向</h4><p>​        还记得我大一下学期的时候跟着一个师姐学演讲，休息的时候她问我想成为一个什么样的人，我说我想成为一个有思想的人。她问我什么叫有思想，我说我不知道，但我会努力探索。</p>\n<p>​        在大学图书馆里，我发现了一本薄薄的小册子，对我影响十分深远，书名《你的第一本哲学书》，这本书已经绝版，我后来只买到了一本影印版。整本书提炼出一句话就是：我们人认知这个世界的通道十分有限（视觉、听觉、触觉等），所以自然条件下我们对世界的认知是片面的扭曲的。因此我曾对舍友吐槽，为什么这个世界总是和我想象中的不一样，原因也是在此。我们看到的世界只是冰山一角，而且还是扭曲过的。</p>\n<p>怎么样才能认识到真正的世界呢？大学四年我没有找到满意的答案，但总体还是有些收获。我看了很多书，听了很多带给我启发的课。我读了张德芬的《遇见未知的自己》、薛兆丰的《经济学通识》、尼采的《查拉图斯特拉如是说》、梁漱溟的《孔孟》，听了哲学系历史系的老师开的公开选修课，但学的东西越多，困惑就越多，脑子也越混乱，思想也开始混乱，不左不右，一会儿唯心一会儿唯物的。就这样迷迷糊糊带着所有疑问走出了校园，进入社会。</p>\n<h4 id=\"26岁的生日\"><a href=\"#26岁的生日\" class=\"headerlink\" title=\"26岁的生日\"></a>26岁的生日</h4><p>​        26岁是我一生中最重要的一年，我解除了大学时期遗留的困惑，这得益于一本书和一个事件。这本书叫《超越感觉——批判性思维指南》提炼出一句话就是：这个世界上有很多有心无心的发表对客观世界进行扭曲的描述来影响他人，想要减轻此影响需要有批判的武器。而一个事件就是2019年有名的996.icu运动，在这个事件中我深刻理解到了阶级斗争。对，这个在我们历史和政治课本出现过多次的词语，我到现在才真正体会到，原因也很简单，从小到大在家庭的呵护中长大，大学又是一个象牙塔，又怎么能理解什么叫阶级呢。</p>\n<p>​        前段时间有和一个人大读研的学妹探讨宗教问题，我认为宗教随着时代发展必然会被丢进历史的垃圾堆里。而如此浅显的道理在人大这所高校里面却没有达成共识，学妹甚至质疑：马克思曾说宗教和人的解放不冲突。什么叫做断章取义，这不就是么，高校就是一所象牙塔，是既得利益者把控舆论的高地，根本不适合作为探讨社会科学的场所。据我学妹的描述，哲学院的老师大多是唯心的，甚至有宗教信仰，喜欢在上课的时候灌鸡汤。更有甚者歪曲历史鼓吹西方民主，我上学遇到过一个教授当众质疑朝鲜战争的革命意义，甚至贬低革命领袖，我还遇到过一个大学老师鼓吹在美国可以在白宫门外说奥巴马你是一只猴（当时特朗普还没上台）借此鼓吹西方国家的自由民主。</p>\n<p>​        所以我说现在的大学生跟当年五四运动的大学生相比根本不是一个概念，根本无法代表先进文化，他们成长之路倍受呵护，但心灵成长之路危机四伏，说到这里读者应该能明白所谓港废是怎么产生的了吧。最近大学生自杀事件挺多的，前几周人大一个女生硕士因工作压力自杀，昨天又爆出新闻北大女生因恋爱问题服药自杀，这两个事件我认为非常典型可以放在一起看，我们不要再去追究到底谁该为死者负责了，这是社会发展到现在必然要面对的社会学难题。这是精神文明的建设远远落后于物质文明建设所酿成的恶果，物质文明建设的辉煌成果大家有目共睹，但我们的精神生活是多么的不堪呢？大学生有大把的闲暇时间在干嘛呢？在刷网剧，追综艺，看网络小说，而这些真的是好的文化产品吗？答案是否定的，这些产品扭曲了这些温室花朵一般的大学生的世界观，现在大学生的典型特点就是自我为中心，将爱情极端神圣化。拿北大女生举例，遇见渣男并不可怕，但如果把他当成命中注定，认为爱情的失去就是人生意义的失去，走进了这样的死胡同是最可怕的。你所处的境遇会给你带来有限的伤害，但更可怕的是境遇对你的认知产生影响从而引发的自我否定，这会对你产生无穷的伤害。</p>\n<p>​        那到底什么叫有思想呢？怎么才能叫做不惑呢？思考几个我们经常听到的几个哲学问题：你是谁，你从哪里来，要到哪里去。这个问题并不难，没有什么高深的学问，只需要掌握高中甚至初中水平的知识，再加上对社会有一定的接触就够了。语数外是我们认知世界的基础，这很好理解，有了语言我们才能获取知识和信息，而数学是现代科学最基础的分析工具。而理化生这些理科是近代以来人类对物理世界客观规律的探索的集大成者。文科中最重要的是历史，告诉你人类的产生与发展，回答了我从哪里来的问题。政治课告诉我们人与社会，经济，文化之间的相互作用关系。一个国家或者地区的地理条件微观上直接决定一个社会群体的经济政治走向，宏观上在国与国之间产生地缘政治从而影响国际关系的发展。政治和地理间接回答了我是谁的问题。一个人学好了历史和理科知识，他就对物理世界和人文世界有了清晰的认知，这些认知构成了世界观，世界观能够系统的回答我从哪儿来。以世界观为基础，找准自己在世界之中的位置，这就回答了我是谁，这也是人生观。以前两者为基础，你会清晰的看到历史前进的方向，你也会找准未来自己应当处于什么位置，这就回答了我要到哪儿去的问题，这就是价值观。年龄越大越发觉九年义务教育中所学的东西是多么的宝贵，这是社会主义带给我们的最廉价的同时又是弥足珍贵的礼物。</p>\n<p>​        26岁是我人生中意义非凡的一年，在这年的生日上我许下愿望，希望自己在正确的道路上走的更远。</p>\n<h4 id=\"南京大屠杀纪念日\"><a href=\"#南京大屠杀纪念日\" class=\"headerlink\" title=\"南京大屠杀纪念日\"></a>南京大屠杀纪念日</h4><p>​        今天南京大屠杀纪念日，82年前，1937年12月13日，侵华日军制造了惨绝人寰的南京大屠杀惨案。30万同胞惨遭杀戮，无数家庭支离破碎。有些人会试图掩盖，有些人似乎已经遗忘，但有些人会时刻铭记。</p>\n<p>​        向战争中遇难同胞致哀。</p>\n"},{"归并排序.mdtitle":"重建二叉树","date":"2017-01-02T16:00:00.000Z","_content":"\n\n\n重建二叉树\n---\n\n题目：\n\n```\n输入二叉树的前序遍历和中序遍历的结果,重建出该二叉树。假设前序遍历和中序遍历结果中都不包含重复的数字,例如输入的前序遍历序列 {1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}重建出如图所示的二叉 树。\n```\n\n解题思路：\n\n```\n前序遍历第一个结点是父结点，中序遍历如果遍历到父结点，那么父结点前面的结点是左子树的结点，后边的结点的右子树的结点，这样我们可以找到左、右子树的前序遍历和中序遍历，我们可以用同样的方法去构建左右子树，可以用递归完成。\n```\n\n\n代码：\n\n\n```\npublic class BinaryTreeNode {\n\n\tpublic static int value;\n\tpublic BinaryTreeNode leftNode;\n\tpublic BinaryTreeNode rightNode;\n}\n\n```\n\n```\npublic class Solution {\n\n\tpublic static BinaryTreeNode constructCore(int[] preorder, int[] inorder) throws Exception {\n\t\tif (preorder == null || inorder == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (preorder.length != inorder.length) {\n\t\t\tthrow new Exception(\"长度不一样，非法的输入\");\n\t\t}\n\t\tBinaryTreeNode root = new BinaryTreeNode();\n\t\tfor (int i = 0; i < inorder.length; i++) {\n\t\t\tif (inorder[i] == preorder[0]) {\n\t\t\t\troot.value = inorder[i];\n\t\t\t\tSystem.out.println(root.value);\n\t\t\t\troot.leftNode = constructCore(Arrays.copyOfRange(preorder, 1, i + 1),\n\t\t\t\t\t\tArrays.copyOfRange(inorder, 0, i));\n\t\t\t\troot.rightNode = constructCore(Arrays.copyOfRange(preorder, i + 1, preorder.length),\n\t\t\t\t\t\tArrays.copyOfRange(inorder, i + 1, inorder.length));\n\t\t\t}\n\t\t}\n\t\treturn root;\n\n\t}\n}\n```","source":"_posts/rebuildBinaryTree.md","raw":"---\n归并排序.mdtitle: 重建二叉树\ndate: 2017-01-03\ncategories: 算法\ntag: \n - 二叉树\n - 算法题\n---\n\n\n\n重建二叉树\n---\n\n题目：\n\n```\n输入二叉树的前序遍历和中序遍历的结果,重建出该二叉树。假设前序遍历和中序遍历结果中都不包含重复的数字,例如输入的前序遍历序列 {1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}重建出如图所示的二叉 树。\n```\n\n解题思路：\n\n```\n前序遍历第一个结点是父结点，中序遍历如果遍历到父结点，那么父结点前面的结点是左子树的结点，后边的结点的右子树的结点，这样我们可以找到左、右子树的前序遍历和中序遍历，我们可以用同样的方法去构建左右子树，可以用递归完成。\n```\n\n\n代码：\n\n\n```\npublic class BinaryTreeNode {\n\n\tpublic static int value;\n\tpublic BinaryTreeNode leftNode;\n\tpublic BinaryTreeNode rightNode;\n}\n\n```\n\n```\npublic class Solution {\n\n\tpublic static BinaryTreeNode constructCore(int[] preorder, int[] inorder) throws Exception {\n\t\tif (preorder == null || inorder == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (preorder.length != inorder.length) {\n\t\t\tthrow new Exception(\"长度不一样，非法的输入\");\n\t\t}\n\t\tBinaryTreeNode root = new BinaryTreeNode();\n\t\tfor (int i = 0; i < inorder.length; i++) {\n\t\t\tif (inorder[i] == preorder[0]) {\n\t\t\t\troot.value = inorder[i];\n\t\t\t\tSystem.out.println(root.value);\n\t\t\t\troot.leftNode = constructCore(Arrays.copyOfRange(preorder, 1, i + 1),\n\t\t\t\t\t\tArrays.copyOfRange(inorder, 0, i));\n\t\t\t\troot.rightNode = constructCore(Arrays.copyOfRange(preorder, i + 1, preorder.length),\n\t\t\t\t\t\tArrays.copyOfRange(inorder, i + 1, inorder.length));\n\t\t\t}\n\t\t}\n\t\treturn root;\n\n\t}\n}\n```","slug":"rebuildBinaryTree","published":1,"updated":"2019-12-13T09:49:30.601Z","title":"rebuildBinaryTree","_id":"ck43y8ihk0000sel9aycm9b3w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"重建二叉树\"><a href=\"#重建二叉树\" class=\"headerlink\" title=\"重建二叉树\"></a>重建二叉树</h2><p>题目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">输入二叉树的前序遍历和中序遍历的结果,重建出该二叉树。假设前序遍历和中序遍历结果中都不包含重复的数字,例如输入的前序遍历序列 &#123;1,2,4,7,3,5,6,8&#125;和中序遍历序列&#123;4,7,2,1,5,3,8,6&#125;重建出如图所示的二叉 树。</span></pre></td></tr></table></figure>\n\n<p>解题思路：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">前序遍历第一个结点是父结点，中序遍历如果遍历到父结点，那么父结点前面的结点是左子树的结点，后边的结点的右子树的结点，这样我们可以找到左、右子树的前序遍历和中序遍历，我们可以用同样的方法去构建左右子树，可以用递归完成。</span></pre></td></tr></table></figure>\n\n\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class BinaryTreeNode &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static int value;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic BinaryTreeNode leftNode;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic BinaryTreeNode rightNode;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static BinaryTreeNode constructCore(int[] preorder, int[] inorder) throws Exception &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (preorder &#x3D;&#x3D; null || inorder &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn null;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (preorder.length !&#x3D; inorder.length) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tthrow new Exception(&quot;长度不一样，非法的输入&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tBinaryTreeNode root &#x3D; new BinaryTreeNode();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; inorder.length; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (inorder[i] &#x3D;&#x3D; preorder[0]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\troot.value &#x3D; inorder[i];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tSystem.out.println(root.value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\troot.leftNode &#x3D; constructCore(Arrays.copyOfRange(preorder, 1, i + 1),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t\t\tArrays.copyOfRange(inorder, 0, i));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\troot.rightNode &#x3D; constructCore(Arrays.copyOfRange(preorder, i + 1, preorder.length),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t\t\tArrays.copyOfRange(inorder, i + 1, inorder.length));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\treturn root;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重建二叉树\"><a href=\"#重建二叉树\" class=\"headerlink\" title=\"重建二叉树\"></a>重建二叉树</h2><p>题目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">输入二叉树的前序遍历和中序遍历的结果,重建出该二叉树。假设前序遍历和中序遍历结果中都不包含重复的数字,例如输入的前序遍历序列 &#123;1,2,4,7,3,5,6,8&#125;和中序遍历序列&#123;4,7,2,1,5,3,8,6&#125;重建出如图所示的二叉 树。</span></pre></td></tr></table></figure>\n\n<p>解题思路：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">前序遍历第一个结点是父结点，中序遍历如果遍历到父结点，那么父结点前面的结点是左子树的结点，后边的结点的右子树的结点，这样我们可以找到左、右子树的前序遍历和中序遍历，我们可以用同样的方法去构建左右子树，可以用递归完成。</span></pre></td></tr></table></figure>\n\n\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class BinaryTreeNode &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static int value;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic BinaryTreeNode leftNode;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic BinaryTreeNode rightNode;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static BinaryTreeNode constructCore(int[] preorder, int[] inorder) throws Exception &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (preorder &#x3D;&#x3D; null || inorder &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn null;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (preorder.length !&#x3D; inorder.length) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tthrow new Exception(&quot;长度不一样，非法的输入&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tBinaryTreeNode root &#x3D; new BinaryTreeNode();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; inorder.length; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (inorder[i] &#x3D;&#x3D; preorder[0]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\troot.value &#x3D; inorder[i];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tSystem.out.println(root.value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\troot.leftNode &#x3D; constructCore(Arrays.copyOfRange(preorder, 1, i + 1),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t\t\tArrays.copyOfRange(inorder, 0, i));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\troot.rightNode &#x3D; constructCore(Arrays.copyOfRange(preorder, i + 1, preorder.length),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t\t\tArrays.copyOfRange(inorder, i + 1, inorder.length));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\treturn root;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>"},{"title":"归并排序","date":"2017-01-03T16:00:00.000Z","_content":"\n\n\n归并排序：\n---\n\n* 背景介绍： 是创建在归并操作上的一种有效的排序算法，效率为O(n log n)。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。 ----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F) \n* **算法规则： 像快速排序一样，由于归并排序也是分治算法，因此可使用分治思想：**<br> 1.申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br> 2.设定两个指针，最初位置分别为两个已经排序序列的起始位置 <br> 3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 <br> 4.重复步骤3直到某一指针到达序列尾  <br> 5.将另一序列剩下的所有元素直接复制到合并序列尾\n\n* 代码实现（Java版本）\n        \n        public void mergeSort(int[] ints, int[] merge, int start, int end) \n        {\n        \tif (start >= end) return;\n        \t\n        \tint mid = (end + start) >> 1;\n        \t\n        \tmergeSort(ints, merge, start, mid);\n        \tmergeSort(ints, merge, mid + 1, end);\n        \n        \tmerge(ints, merge, start, end, mid);\n        \n\t    }\n        \n        private void merge(int[] a, int[] merge, int start, int end,int mid) \n        {\n        \tint i = start;\n        \tint j = mid+1;\n        \tint pos = start;\n        \twhile( i <= mid || j <= end ){\n        \t\tif( i > mid ){\n        \t\t\twhile( j <= end ) merge[pos++] = a[j++];\n        \t\t\tbreak;\n        \t\t}\n        \t\t\n        \t\tif( j > end ){\n        \t\t\twhile( i <= mid ) merge[pos++] = a[i++];\n        \t\t\tbreak;\n        \t\t}\n        \t\t\n        \t\tmerge[pos++] = a[i] >= a[j] ? a[j++] : a[i++];\n        \t}\n        \t\n        \tfor (pos = start; pos <= end; pos++)\n        \t\ta[pos] = merge[pos];\n\t    \n\t    }\n","source":"_posts/mergeSort.md","raw":"---\ntitle: 归并排序\ndate: 2017-01-04\ncategories: 算法\ntag: 排序\n---\n\n\n\n归并排序：\n---\n\n* 背景介绍： 是创建在归并操作上的一种有效的排序算法，效率为O(n log n)。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。 ----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F) \n* **算法规则： 像快速排序一样，由于归并排序也是分治算法，因此可使用分治思想：**<br> 1.申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br> 2.设定两个指针，最初位置分别为两个已经排序序列的起始位置 <br> 3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 <br> 4.重复步骤3直到某一指针到达序列尾  <br> 5.将另一序列剩下的所有元素直接复制到合并序列尾\n\n* 代码实现（Java版本）\n        \n        public void mergeSort(int[] ints, int[] merge, int start, int end) \n        {\n        \tif (start >= end) return;\n        \t\n        \tint mid = (end + start) >> 1;\n        \t\n        \tmergeSort(ints, merge, start, mid);\n        \tmergeSort(ints, merge, mid + 1, end);\n        \n        \tmerge(ints, merge, start, end, mid);\n        \n\t    }\n        \n        private void merge(int[] a, int[] merge, int start, int end,int mid) \n        {\n        \tint i = start;\n        \tint j = mid+1;\n        \tint pos = start;\n        \twhile( i <= mid || j <= end ){\n        \t\tif( i > mid ){\n        \t\t\twhile( j <= end ) merge[pos++] = a[j++];\n        \t\t\tbreak;\n        \t\t}\n        \t\t\n        \t\tif( j > end ){\n        \t\t\twhile( i <= mid ) merge[pos++] = a[i++];\n        \t\t\tbreak;\n        \t\t}\n        \t\t\n        \t\tmerge[pos++] = a[i] >= a[j] ? a[j++] : a[i++];\n        \t}\n        \t\n        \tfor (pos = start; pos <= end; pos++)\n        \t\ta[pos] = merge[pos];\n\t    \n\t    }\n","slug":"mergeSort","published":1,"updated":"2019-12-13T09:51:20.100Z","_id":"ck43ycid80001t8l9efj8gcm7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"归并排序：\"><a href=\"#归并排序：\" class=\"headerlink\" title=\"归并排序：\"></a>归并排序：</h2><ul>\n<li><p>背景介绍： 是创建在归并操作上的一种有效的排序算法，效率为O(n log n)。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。 —– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a> </p>\n</li>\n<li><p><strong>算法规则： 像快速排序一样，由于归并排序也是分治算法，因此可使用分治思想：</strong><br> 1.申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br> 2.设定两个指针，最初位置分别为两个已经排序序列的起始位置 <br> 3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 <br> 4.重复步骤3直到某一指针到达序列尾  <br> 5.将另一序列剩下的所有元素直接复制到合并序列尾</p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<pre><code>public void mergeSort(int[] ints, int[] merge, int start, int end) \n{\n    if (start &gt;= end) return;\n\n    int mid = (end + start) &gt;&gt; 1;\n\n    mergeSort(ints, merge, start, mid);\n    mergeSort(ints, merge, mid + 1, end);\n\n    merge(ints, merge, start, end, mid);\n\n}\n\nprivate void merge(int[] a, int[] merge, int start, int end,int mid) \n{\n    int i = start;\n    int j = mid+1;\n    int pos = start;\n    while( i &lt;= mid || j &lt;= end ){\n        if( i &gt; mid ){\n            while( j &lt;= end ) merge[pos++] = a[j++];\n            break;\n        }\n\n        if( j &gt; end ){\n            while( i &lt;= mid ) merge[pos++] = a[i++];\n            break;\n        }\n\n        merge[pos++] = a[i] &gt;= a[j] ? a[j++] : a[i++];\n    }\n\n    for (pos = start; pos &lt;= end; pos++)\n        a[pos] = merge[pos];\n\n}</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"归并排序：\"><a href=\"#归并排序：\" class=\"headerlink\" title=\"归并排序：\"></a>归并排序：</h2><ul>\n<li><p>背景介绍： 是创建在归并操作上的一种有效的排序算法，效率为O(n log n)。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。 —– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a> </p>\n</li>\n<li><p><strong>算法规则： 像快速排序一样，由于归并排序也是分治算法，因此可使用分治思想：</strong><br> 1.申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br> 2.设定两个指针，最初位置分别为两个已经排序序列的起始位置 <br> 3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 <br> 4.重复步骤3直到某一指针到达序列尾  <br> 5.将另一序列剩下的所有元素直接复制到合并序列尾</p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<pre><code>public void mergeSort(int[] ints, int[] merge, int start, int end) \n{\n    if (start &gt;= end) return;\n\n    int mid = (end + start) &gt;&gt; 1;\n\n    mergeSort(ints, merge, start, mid);\n    mergeSort(ints, merge, mid + 1, end);\n\n    merge(ints, merge, start, end, mid);\n\n}\n\nprivate void merge(int[] a, int[] merge, int start, int end,int mid) \n{\n    int i = start;\n    int j = mid+1;\n    int pos = start;\n    while( i &lt;= mid || j &lt;= end ){\n        if( i &gt; mid ){\n            while( j &lt;= end ) merge[pos++] = a[j++];\n            break;\n        }\n\n        if( j &gt; end ){\n            while( i &lt;= mid ) merge[pos++] = a[i++];\n            break;\n        }\n\n        merge[pos++] = a[i] &gt;= a[j] ? a[j++] : a[i++];\n    }\n\n    for (pos = start; pos &lt;= end; pos++)\n        a[pos] = merge[pos];\n\n}</code></pre></li>\n</ul>\n"},{"title":"快速排序","date":"2017-01-03T16:00:00.000Z","_content":"\n快速排序：\n---\n\n* 背景介绍： 又称划分交换排序（partition-exchange sort），一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来 ----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F)  **\n* 算法规则： 本质来说，快速排序的过程就是不断地将无序元素集递归分割，一直到所有的分区只包含一个元素为止。 <br> 由于快速排序是一种分治算法，我们可以用分治思想将快排分为三个步骤：<br> 1.分：设定一个分割值，并根据它将数据分为两部分<br> 2.治：分别在两部分用递归的方式，继续使用快速排序法 <br> 3.合：对分割的部分排序直到完成 \n\n* 代码实现（Java版本）\n```\n        public int dividerAndChange(int[] args, int start, int end) \n        {   \n            //标准值\n        \tint pivot = args[start];\n    \t\twhile (start < end) {\n    \t\t\t// 从右向左寻找，一直找到比参照值还小的数值，进行替换\n    \t\t\t// 这里要注意，循环条件必须是 当后面的数 小于 参照值的时候\n    \t\t\t// 我们才跳出这一层循环\n    \t\t\twhile (start < end && args[end] >= pivot)\n    \t\t\t\tend--;\n    \n    \t\t\tif (start < end) {\n    \t\t\t\tswap(args, start, end);\n    \t\t\t\tstart++;\n    \t\t\t}\n    \n    \t\t\t// 从左向右寻找，一直找到比参照值还大的数组，进行替换\n    \t\t\twhile (start < end && args[start] < pivot)\n    \t\t\t\tstart++;\n    \n    \t\t\tif (start < end) {\n    \t\t\t\tswap(args, end, start);\n    \t\t\t\tend--;\n    \t\t\t}\n    \t\t}\n    \n    \t\targs[start] = pivot;\n    \t\treturn start;\n    \t}\n\n    \tpublic void sort(int[] args, int start, int end) \n        {\n    \t\t//当分治的元素大于1个的时候，才有意义\n    \t\tif ( end - start > 1) {\n                int mid = 0;\n    \t\t\tmid = dividerAndChange(args, start, end);\n    \t\t\t// 对左部分排序\n    \t\t\tsort(args, start, mid);\n    \t\t\t// 对右部分排序\n    \t\t\tsort(args, mid + 1, end);\n    \t\t}\n    \t}\n\n    \tprivate void swap(int[] args, int fromIndex, int toIndex) \n        {\n    \t\targs[fromIndex] = args[toIndex];\n    \t}\n```\n","source":"_posts/quickSort.md","raw":"---\ntitle: 快速排序\ndate: 2017-01-04\ncategories: 算法\ntag: 排序\n---\n\n快速排序：\n---\n\n* 背景介绍： 又称划分交换排序（partition-exchange sort），一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来 ----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F)  **\n* 算法规则： 本质来说，快速排序的过程就是不断地将无序元素集递归分割，一直到所有的分区只包含一个元素为止。 <br> 由于快速排序是一种分治算法，我们可以用分治思想将快排分为三个步骤：<br> 1.分：设定一个分割值，并根据它将数据分为两部分<br> 2.治：分别在两部分用递归的方式，继续使用快速排序法 <br> 3.合：对分割的部分排序直到完成 \n\n* 代码实现（Java版本）\n```\n        public int dividerAndChange(int[] args, int start, int end) \n        {   \n            //标准值\n        \tint pivot = args[start];\n    \t\twhile (start < end) {\n    \t\t\t// 从右向左寻找，一直找到比参照值还小的数值，进行替换\n    \t\t\t// 这里要注意，循环条件必须是 当后面的数 小于 参照值的时候\n    \t\t\t// 我们才跳出这一层循环\n    \t\t\twhile (start < end && args[end] >= pivot)\n    \t\t\t\tend--;\n    \n    \t\t\tif (start < end) {\n    \t\t\t\tswap(args, start, end);\n    \t\t\t\tstart++;\n    \t\t\t}\n    \n    \t\t\t// 从左向右寻找，一直找到比参照值还大的数组，进行替换\n    \t\t\twhile (start < end && args[start] < pivot)\n    \t\t\t\tstart++;\n    \n    \t\t\tif (start < end) {\n    \t\t\t\tswap(args, end, start);\n    \t\t\t\tend--;\n    \t\t\t}\n    \t\t}\n    \n    \t\targs[start] = pivot;\n    \t\treturn start;\n    \t}\n\n    \tpublic void sort(int[] args, int start, int end) \n        {\n    \t\t//当分治的元素大于1个的时候，才有意义\n    \t\tif ( end - start > 1) {\n                int mid = 0;\n    \t\t\tmid = dividerAndChange(args, start, end);\n    \t\t\t// 对左部分排序\n    \t\t\tsort(args, start, mid);\n    \t\t\t// 对右部分排序\n    \t\t\tsort(args, mid + 1, end);\n    \t\t}\n    \t}\n\n    \tprivate void swap(int[] args, int fromIndex, int toIndex) \n        {\n    \t\targs[fromIndex] = args[toIndex];\n    \t}\n```\n","slug":"quickSort","published":1,"updated":"2019-12-13T09:51:30.611Z","_id":"ck43ygaap000ct8l9bn7s6pdt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"快速排序：\"><a href=\"#快速排序：\" class=\"headerlink\" title=\"快速排序：\"></a>快速排序：</h2><ul>\n<li><p>背景介绍： 又称划分交换排序（partition-exchange sort），一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来 —– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a>  **</p>\n</li>\n<li><p>算法规则： 本质来说，快速排序的过程就是不断地将无序元素集递归分割，一直到所有的分区只包含一个元素为止。 <br> 由于快速排序是一种分治算法，我们可以用分治思想将快排分为三个步骤：<br> 1.分：设定一个分割值，并根据它将数据分为两部分<br> 2.治：分别在两部分用递归的方式，继续使用快速排序法 <br> 3.合：对分割的部分排序直到完成 </p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">   public int dividerAndChange(int[] args, int start, int end) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &#123;   </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">       &#x2F;&#x2F;标准值</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   \tint pivot &#x3D; args[start];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\twhile (start &lt; end) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 从右向左寻找，一直找到比参照值还小的数值，进行替换</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 这里要注意，循环条件必须是 当后面的数 小于 参照值的时候</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 我们才跳出这一层循环</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\twhile (start &lt; end &amp;&amp; args[end] &gt;&#x3D; pivot)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tend--;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (start &lt; end) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tswap(args, start, end);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstart++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 从左向右寻找，一直找到比参照值还大的数组，进行替换</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\twhile (start &lt; end &amp;&amp; args[start] &lt; pivot)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstart++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (start &lt; end) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tswap(args, end, start);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tend--;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">\targs[start] &#x3D; pivot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">\treturn start;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">public void sort(int[] args, int start, int end) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#x2F;&#x2F;当分治的元素大于1个的时候，才有意义</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tif ( end - start &gt; 1) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">           int mid &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tmid &#x3D; dividerAndChange(args, start, end);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 对左部分排序</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tsort(args, start, mid);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 对右部分排序</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tsort(args, mid + 1, end);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">private void swap(int[] args, int fromIndex, int toIndex) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">\targs[fromIndex] &#x3D; args[toIndex];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快速排序：\"><a href=\"#快速排序：\" class=\"headerlink\" title=\"快速排序：\"></a>快速排序：</h2><ul>\n<li><p>背景介绍： 又称划分交换排序（partition-exchange sort），一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来 —– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a>  **</p>\n</li>\n<li><p>算法规则： 本质来说，快速排序的过程就是不断地将无序元素集递归分割，一直到所有的分区只包含一个元素为止。 <br> 由于快速排序是一种分治算法，我们可以用分治思想将快排分为三个步骤：<br> 1.分：设定一个分割值，并根据它将数据分为两部分<br> 2.治：分别在两部分用递归的方式，继续使用快速排序法 <br> 3.合：对分割的部分排序直到完成 </p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">   public int dividerAndChange(int[] args, int start, int end) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &#123;   </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">       &#x2F;&#x2F;标准值</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   \tint pivot &#x3D; args[start];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\twhile (start &lt; end) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 从右向左寻找，一直找到比参照值还小的数值，进行替换</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 这里要注意，循环条件必须是 当后面的数 小于 参照值的时候</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 我们才跳出这一层循环</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\twhile (start &lt; end &amp;&amp; args[end] &gt;&#x3D; pivot)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tend--;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (start &lt; end) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tswap(args, start, end);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstart++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 从左向右寻找，一直找到比参照值还大的数组，进行替换</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\twhile (start &lt; end &amp;&amp; args[start] &lt; pivot)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstart++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif (start &lt; end) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tswap(args, end, start);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tend--;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">\targs[start] &#x3D; pivot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">\treturn start;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">public void sort(int[] args, int start, int end) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#x2F;&#x2F;当分治的元素大于1个的时候，才有意义</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tif ( end - start &gt; 1) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">           int mid &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tmid &#x3D; dividerAndChange(args, start, end);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 对左部分排序</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tsort(args, start, mid);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F; 对右部分排序</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tsort(args, mid + 1, end);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">private void swap(int[] args, int fromIndex, int toIndex) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">\targs[fromIndex] &#x3D; args[toIndex];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"冒泡排序","date":"2017-01-02T16:00:00.000Z","_content":"\n冒泡排序：\n---\n\n* 背景介绍： 是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F) \n* 算法规则： 由于算法每次都将一个最大的元素往上冒，我们可以将待排序集合(0...n)看成两部分，一部分为(k..n)的待排序unsorted集合，另一部分为(0...k)的已排序sorted集合，每一次都在unsorted集合从前往后遍历，选出一个数，如果这个数比其后面的数大，则进行交换。完成一轮之后，就肯定能将这一轮unsorted集合中最大的数移动到集合的最后，并且将这个数从unsorted中删除，移入sorted中。\n\n* 代码实现（Java版本）\n```\npublic void sort(int[] args) \n        {\n        \t//第一层循环从数组的最后往前遍历\n    \t\tfor (int i = args.length - 1; i > 0 ; --i) {\n                //这里循环的上界是 i - 1，在这里体现出 “将每一趟排序选出来的最大的数从sorted中移除”\n    \t\t\tfor (int j = 0; j < i; j++) {\n                    //保证在相邻的两个数中比较选出最大的并且进行交换(冒泡过程)\n    \t\t\t\tif (args[j] > args[j+1]) {\n    \t\t\t\t\tint temp = args[j];\n    \t\t\t\t\targs[j] = args[j+1];\n    \t\t\t\t\targs[j+1] = temp;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n\t    }\n```\n","source":"_posts/bubblingSort.md","raw":"---\ntitle: 冒泡排序\ndate: 2017-01-03\ncategories: 算法\ntag: 排序\n---\n\n冒泡排序：\n---\n\n* 背景介绍： 是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F) \n* 算法规则： 由于算法每次都将一个最大的元素往上冒，我们可以将待排序集合(0...n)看成两部分，一部分为(k..n)的待排序unsorted集合，另一部分为(0...k)的已排序sorted集合，每一次都在unsorted集合从前往后遍历，选出一个数，如果这个数比其后面的数大，则进行交换。完成一轮之后，就肯定能将这一轮unsorted集合中最大的数移动到集合的最后，并且将这个数从unsorted中删除，移入sorted中。\n\n* 代码实现（Java版本）\n```\npublic void sort(int[] args) \n        {\n        \t//第一层循环从数组的最后往前遍历\n    \t\tfor (int i = args.length - 1; i > 0 ; --i) {\n                //这里循环的上界是 i - 1，在这里体现出 “将每一趟排序选出来的最大的数从sorted中移除”\n    \t\t\tfor (int j = 0; j < i; j++) {\n                    //保证在相邻的两个数中比较选出最大的并且进行交换(冒泡过程)\n    \t\t\t\tif (args[j] > args[j+1]) {\n    \t\t\t\t\tint temp = args[j];\n    \t\t\t\t\targs[j] = args[j+1];\n    \t\t\t\t\targs[j+1] = temp;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n\t    }\n```\n","slug":"bubblingSort","published":1,"updated":"2019-12-13T09:51:14.064Z","_id":"ck43yivio000ht8l9419i9bvc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"冒泡排序：\"><a href=\"#冒泡排序：\" class=\"headerlink\" title=\"冒泡排序：\"></a>冒泡排序：</h2><ul>\n<li><p>背景介绍： 是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。—– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a> </p>\n</li>\n<li><p>算法规则： 由于算法每次都将一个最大的元素往上冒，我们可以将待排序集合(0…n)看成两部分，一部分为(k..n)的待排序unsorted集合，另一部分为(0…k)的已排序sorted集合，每一次都在unsorted集合从前往后遍历，选出一个数，如果这个数比其后面的数大，则进行交换。完成一轮之后，就肯定能将这一轮unsorted集合中最大的数移动到集合的最后，并且将这个数从unsorted中删除，移入sorted中。</p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public void sort(int[] args) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        \t&#x2F;&#x2F;第一层循环从数组的最后往前遍历</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\tfor (int i &#x3D; args.length - 1; i &gt; 0 ; --i) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#x2F;&#x2F;这里循环的上界是 i - 1，在这里体现出 “将每一趟排序选出来的最大的数从sorted中移除”</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\tfor (int j &#x3D; 0; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#x2F;&#x2F;保证在相邻的两个数中比较选出最大的并且进行交换(冒泡过程)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\tif (args[j] &gt; args[j+1]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t\tint temp &#x3D; args[j];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t\targs[j] &#x3D; args[j+1];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t\targs[j+1] &#x3D; temp;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t    &#125;</span></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡排序：\"><a href=\"#冒泡排序：\" class=\"headerlink\" title=\"冒泡排序：\"></a>冒泡排序：</h2><ul>\n<li><p>背景介绍： 是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。—– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a> </p>\n</li>\n<li><p>算法规则： 由于算法每次都将一个最大的元素往上冒，我们可以将待排序集合(0…n)看成两部分，一部分为(k..n)的待排序unsorted集合，另一部分为(0…k)的已排序sorted集合，每一次都在unsorted集合从前往后遍历，选出一个数，如果这个数比其后面的数大，则进行交换。完成一轮之后，就肯定能将这一轮unsorted集合中最大的数移动到集合的最后，并且将这个数从unsorted中删除，移入sorted中。</p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public void sort(int[] args) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        \t&#x2F;&#x2F;第一层循环从数组的最后往前遍历</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\tfor (int i &#x3D; args.length - 1; i &gt; 0 ; --i) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#x2F;&#x2F;这里循环的上界是 i - 1，在这里体现出 “将每一趟排序选出来的最大的数从sorted中移除”</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\tfor (int j &#x3D; 0; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#x2F;&#x2F;保证在相邻的两个数中比较选出最大的并且进行交换(冒泡过程)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\tif (args[j] &gt; args[j+1]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t\tint temp &#x3D; args[j];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t\targs[j] &#x3D; args[j+1];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t\targs[j+1] &#x3D; temp;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t    &#125;</span></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"选择排序","date":"2017-01-03T16:00:00.000Z","_content":"\n选择排序：\n---\n\n* 背景介绍： 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 ----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F) \n* 算法规则： 将待排序集合(0...n)看成两部分，在起始状态中，一部分为(k..n)的待排序unsorted集合，另一部分为(0...k)的已排序sorted集合,在待排序集合中挑选出最小元素并且记录下标i，若该下标不等于k，那么 unsorted[i] 与 sorted[k]交换 ，一直重复这个过程，直到unsorted集合中元素为空为止。 \n\n* 代码实现（Java版本）\n```\npublic void sort(int[] args) \n{\n        int len = args.length;\n        for (int i = 0,k = 0; i < len; i++,k = i) {\n            // 在这一层循环中找最小\n            for (int j = i + 1; j < len; j++) {\n                // 如果后面的元素比前面的小，那么就交换下标，每一趟都会选择出来一个最小值的下标\n                if (args[k] > args[j]) k = j;\n    \t\t}\n    \n    \t\tif (i != k) {\n    \t\t\tint tmp = args[i];\n    \t\t\targs[i] = args[k];\n    \t\t\targs[k] = tmp;\n    \t\t}\n    \t}\n    }\n```\n","source":"_posts/selectSort.md","raw":"---\ntitle: 选择排序\ndate: 2017-01-04\ncategories: 算法\ntag: 排序\n---\n\n选择排序：\n---\n\n* 背景介绍： 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 ----- 来自 [wikipedia](https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F) \n* 算法规则： 将待排序集合(0...n)看成两部分，在起始状态中，一部分为(k..n)的待排序unsorted集合，另一部分为(0...k)的已排序sorted集合,在待排序集合中挑选出最小元素并且记录下标i，若该下标不等于k，那么 unsorted[i] 与 sorted[k]交换 ，一直重复这个过程，直到unsorted集合中元素为空为止。 \n\n* 代码实现（Java版本）\n```\npublic void sort(int[] args) \n{\n        int len = args.length;\n        for (int i = 0,k = 0; i < len; i++,k = i) {\n            // 在这一层循环中找最小\n            for (int j = i + 1; j < len; j++) {\n                // 如果后面的元素比前面的小，那么就交换下标，每一趟都会选择出来一个最小值的下标\n                if (args[k] > args[j]) k = j;\n    \t\t}\n    \n    \t\tif (i != k) {\n    \t\t\tint tmp = args[i];\n    \t\t\targs[i] = args[k];\n    \t\t\targs[k] = tmp;\n    \t\t}\n    \t}\n    }\n```\n","slug":"selectSort","published":1,"updated":"2019-12-13T09:51:44.827Z","_id":"ck43ynbjb000kt8l9h3yq1ru5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"选择排序：\"><a href=\"#选择排序：\" class=\"headerlink\" title=\"选择排序：\"></a>选择排序：</h2><ul>\n<li><p>背景介绍： 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 —– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a> </p>\n</li>\n<li><p>算法规则： 将待排序集合(0…n)看成两部分，在起始状态中，一部分为(k..n)的待排序unsorted集合，另一部分为(0…k)的已排序sorted集合,在待排序集合中挑选出最小元素并且记录下标i，若该下标不等于k，那么 unsorted[i] 与 sorted[k]交换 ，一直重复这个过程，直到unsorted集合中元素为空为止。 </p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public void sort(int[] args) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        int len &#x3D; args.length;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (int i &#x3D; 0,k &#x3D; 0; i &lt; len; i++,k &#x3D; i) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#x2F;&#x2F; 在这一层循环中找最小</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">            for (int j &#x3D; i + 1; j &lt; len; j++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#x2F;&#x2F; 如果后面的元素比前面的小，那么就交换下标，每一趟都会选择出来一个最小值的下标</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">                if (args[k] &gt; args[j]) k &#x3D; j;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\tif (i !&#x3D; k) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\tint tmp &#x3D; args[i];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\targs[i] &#x3D; args[k];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\targs[k] &#x3D; tmp;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"选择排序：\"><a href=\"#选择排序：\" class=\"headerlink\" title=\"选择排序：\"></a>选择排序：</h2><ul>\n<li><p>背景介绍： 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 —– 来自 <a href=\"https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">wikipedia</a> </p>\n</li>\n<li><p>算法规则： 将待排序集合(0…n)看成两部分，在起始状态中，一部分为(k..n)的待排序unsorted集合，另一部分为(0…k)的已排序sorted集合,在待排序集合中挑选出最小元素并且记录下标i，若该下标不等于k，那么 unsorted[i] 与 sorted[k]交换 ，一直重复这个过程，直到unsorted集合中元素为空为止。 </p>\n</li>\n<li><p>代码实现（Java版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public void sort(int[] args) </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        int len &#x3D; args.length;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (int i &#x3D; 0,k &#x3D; 0; i &lt; len; i++,k &#x3D; i) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#x2F;&#x2F; 在这一层循环中找最小</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">            for (int j &#x3D; i + 1; j &lt; len; j++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#x2F;&#x2F; 如果后面的元素比前面的小，那么就交换下标，每一趟都会选择出来一个最小值的下标</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">                if (args[k] &gt; args[j]) k &#x3D; j;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\tif (i !&#x3D; k) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\tint tmp &#x3D; args[i];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\targs[i] &#x3D; args[k];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t\targs[k] &#x3D; tmp;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"扑克牌的顺子","date":"2017-01-03T16:00:00.000Z","_content":"\n\n\n扑克牌的顺子\n---\n\n题目:\n\n```\n从扑克牌中随机抽 5 张牌,判断是不是顺子,即这 5 张牌是不是连续的。 2-10 为数字本身,A 为 1,J 为 11,Q 为 12,K 为 13,而大小王可以看成任意的 数字。\n```\n\n>解题思路：我们可以把5张牌看成是由5个数字组成的俄数组。大小王是特殊的数字，我们可以把它们都定义为0，这样就可以和其他的牌区分开来。\n\n\n>首先把数组排序，再统计数组中0的个数，最后统计排序之后的数组中相邻数字之间的空缺总数。如果空缺的总数小于或者等于0的个数，那么这个数组就是连续的，反之则不连续。如果数组中的非0数字重复出现，则该数组是不连续的。换成扑克牌的描述方式就是如果一幅牌里含有对子，则不可能是顺子。\n\n详细代码：\n\n```\nimport java.util.Arrays;\n\npublic class Solution {\n\n\tpublic boolean isContinuous(int[] number){\n\t\tif(number == null){\n\t\t\treturn false;\n\t\t}\n\t\tArrays.sort(number);\n\t\tint numberZero = 0;\n\t\tint numberGap = 0;\n\t\t//计算数组中0的个数\n\t\tfor(int i = 0;i < number.length&&number[i] == 0; i++){\n\t\t\tnumberZero++;\n\t\t}\n\t\t//统计数组中的间隔数目\n\t\tint small = numberZero;\n\t\tint big = small + 1;\n\t\twhile(big<number.length){\n\t\t\t//两个数相等，有对子，不可能是顺子\n\t\t\tif(number[small] == number[big]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnumberGap+= number[big] - number[small] - 1;\n\t\t\tsmall = big;\n\t\t\tbig++;\n\t\t}\n\t\treturn (numberGap>numberZero)?false:true;\n\t\t\n\t}\n}\n\n```\n","source":"_posts/shunzi.md","raw":"---\ntitle: 扑克牌的顺子\ndate: 2017-01-04\ncategories: 算法\ntag: 算法题\n---\n\n\n\n扑克牌的顺子\n---\n\n题目:\n\n```\n从扑克牌中随机抽 5 张牌,判断是不是顺子,即这 5 张牌是不是连续的。 2-10 为数字本身,A 为 1,J 为 11,Q 为 12,K 为 13,而大小王可以看成任意的 数字。\n```\n\n>解题思路：我们可以把5张牌看成是由5个数字组成的俄数组。大小王是特殊的数字，我们可以把它们都定义为0，这样就可以和其他的牌区分开来。\n\n\n>首先把数组排序，再统计数组中0的个数，最后统计排序之后的数组中相邻数字之间的空缺总数。如果空缺的总数小于或者等于0的个数，那么这个数组就是连续的，反之则不连续。如果数组中的非0数字重复出现，则该数组是不连续的。换成扑克牌的描述方式就是如果一幅牌里含有对子，则不可能是顺子。\n\n详细代码：\n\n```\nimport java.util.Arrays;\n\npublic class Solution {\n\n\tpublic boolean isContinuous(int[] number){\n\t\tif(number == null){\n\t\t\treturn false;\n\t\t}\n\t\tArrays.sort(number);\n\t\tint numberZero = 0;\n\t\tint numberGap = 0;\n\t\t//计算数组中0的个数\n\t\tfor(int i = 0;i < number.length&&number[i] == 0; i++){\n\t\t\tnumberZero++;\n\t\t}\n\t\t//统计数组中的间隔数目\n\t\tint small = numberZero;\n\t\tint big = small + 1;\n\t\twhile(big<number.length){\n\t\t\t//两个数相等，有对子，不可能是顺子\n\t\t\tif(number[small] == number[big]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnumberGap+= number[big] - number[small] - 1;\n\t\t\tsmall = big;\n\t\t\tbig++;\n\t\t}\n\t\treturn (numberGap>numberZero)?false:true;\n\t\t\n\t}\n}\n\n```\n","slug":"shunzi","published":1,"updated":"2019-12-13T09:51:39.220Z","_id":"ck43yxwvr000ot8l902abg3q5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"扑克牌的顺子\"><a href=\"#扑克牌的顺子\" class=\"headerlink\" title=\"扑克牌的顺子\"></a>扑克牌的顺子</h2><p>题目:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">从扑克牌中随机抽 5 张牌,判断是不是顺子,即这 5 张牌是不是连续的。 2-10 为数字本身,A 为 1,J 为 11,Q 为 12,K 为 13,而大小王可以看成任意的 数字。</span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解题思路：我们可以把5张牌看成是由5个数字组成的俄数组。大小王是特殊的数字，我们可以把它们都定义为0，这样就可以和其他的牌区分开来。</p>\n</blockquote>\n<blockquote>\n<p>首先把数组排序，再统计数组中0的个数，最后统计排序之后的数组中相邻数字之间的空缺总数。如果空缺的总数小于或者等于0的个数，那么这个数组就是连续的，反之则不连续。如果数组中的非0数字重复出现，则该数组是不连续的。换成扑克牌的描述方式就是如果一幅牌里含有对子，则不可能是顺子。</p>\n</blockquote>\n<p>详细代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic boolean isContinuous(int[] number)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif(number &#x3D;&#x3D; null)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn false;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tArrays.sort(number);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint numberZero &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint numberGap &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F;计算数组中0的个数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tfor(int i &#x3D; 0;i &lt; number.length&amp;&amp;number[i] &#x3D;&#x3D; 0; i++)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tnumberZero++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F;统计数组中的间隔数目</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint small &#x3D; numberZero;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint big &#x3D; small + 1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\twhile(big&lt;number.length)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#x2F;&#x2F;两个数相等，有对子，不可能是顺子</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif(number[small] &#x3D;&#x3D; number[big])&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\treturn false;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tnumberGap+&#x3D; number[big] - number[small] - 1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tsmall &#x3D; big;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tbig++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\treturn (numberGap&gt;numberZero)?false:true;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"扑克牌的顺子\"><a href=\"#扑克牌的顺子\" class=\"headerlink\" title=\"扑克牌的顺子\"></a>扑克牌的顺子</h2><p>题目:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">从扑克牌中随机抽 5 张牌,判断是不是顺子,即这 5 张牌是不是连续的。 2-10 为数字本身,A 为 1,J 为 11,Q 为 12,K 为 13,而大小王可以看成任意的 数字。</span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解题思路：我们可以把5张牌看成是由5个数字组成的俄数组。大小王是特殊的数字，我们可以把它们都定义为0，这样就可以和其他的牌区分开来。</p>\n</blockquote>\n<blockquote>\n<p>首先把数组排序，再统计数组中0的个数，最后统计排序之后的数组中相邻数字之间的空缺总数。如果空缺的总数小于或者等于0的个数，那么这个数组就是连续的，反之则不连续。如果数组中的非0数字重复出现，则该数组是不连续的。换成扑克牌的描述方式就是如果一幅牌里含有对子，则不可能是顺子。</p>\n</blockquote>\n<p>详细代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic boolean isContinuous(int[] number)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tif(number &#x3D;&#x3D; null)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn false;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tArrays.sort(number);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint numberZero &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint numberGap &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F;计算数组中0的个数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tfor(int i &#x3D; 0;i &lt; number.length&amp;&amp;number[i] &#x3D;&#x3D; 0; i++)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tnumberZero++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;&#x2F;统计数组中的间隔数目</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint small &#x3D; numberZero;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tint big &#x3D; small + 1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\twhile(big&lt;number.length)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#x2F;&#x2F;两个数相等，有对子，不可能是顺子</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif(number[small] &#x3D;&#x3D; number[big])&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\treturn false;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tnumberGap+&#x3D; number[big] - number[small] - 1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tsmall &#x3D; big;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tbig++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\treturn (numberGap&gt;numberZero)?false:true;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n"},{"title":"设计一个有getMin功能的","date":"2017-01-04T16:00:00.000Z","_content":"\n\n\n设计一个有getMin功能的栈\n---\n\n实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。\n\n要求：\n\n1. pop、push、getMin操作的时间复杂度都是O(1)\n2. 设计的栈类型可以使用现成的栈结构\n\n解题：\n\n\n```\npackage chapter01_stackandqueue;\n\nimport java.util.Stack;\n\n/**\n * \n * 实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。 要求： 1. pop、push、getMin操作的时间复杂度都是O(1)\n * 2. 设计的栈类型可以使用现成的栈结构\n * \n * @author dream\n *\n */\npublic class Problem01_GetMinStack {\n\n\tpublic static class MyStack1 {\n\n\t\t/**\n\t\t * 两个栈，其中stacMin负责将最小值放在栈顶，stackData通过获取stackMin的peek()函数来获取到栈中的最小值\n\t\t */\n\t\tprivate Stack<Integer> stackData;\n\t\tprivate Stack<Integer> stackMin;\n\n\t\t/**\n\t\t * 在构造函数里面初始化两个栈\n\t\t */\n\t\tpublic MyStack1() {\n\t\t\tstackData = new Stack<Integer>();\n\t\t\tstackMin = new Stack<Integer>();\n\t\t}\n\n\t\t/**\n\t\t * 该函数是stackData弹出栈顶数据，如果弹出的数据恰好等于stackMin的数据，那么stackMin也弹出\n\t\t * @return\n\t\t */\n\t\tpublic Integer pop() {\n\t\t\tInteger num = (Integer) stackData.pop();\n\t\t\tif (num == getmin()) {\n\t\t\t\treturn (Integer) stackMin.pop();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 该函数是先判断stackMin是否为空，如果为空，就push新的数据，如果这个数小于stackMin中的栈顶元素，那么stackMin需要push新的数，不管怎么样\n\t\t * stackData都需要push新的数据\n\t\t * @param value\n\t\t */\n\t\tpublic void push(Integer value) {\n\t\t\tif (stackMin.isEmpty()) {\n\t\t\t\tstackMin.push(value);\n\t\t\t}\n\n\t\t\telse if (value < getmin()) {\n\t\t\t\tstackMin.push(value);\n\t\t\t}\n\t\t\tstackData.push(value);\n\t\t}\n\n\t\t/**\n\t\t * 该函数是当stackMin为空的话第一次也得push到stackMin的栈中，返回stackMin的栈顶元素\n\t\t * @return\n\t\t */\n\t\tpublic Integer getmin() {\n\t\t\tif (stackMin == null) {\n\t\t\t\tthrow new RuntimeException(\"stackMin is empty\");\n\t\t\t}\n\t\t\treturn (Integer) stackMin.peek();\n\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t/**\n\t\t * 要注意要将MyStack1声明成静态的，静态内部类不持有外部类的引用\n\t\t */\n\t\tMyStack1 stack1 = new MyStack1();\n\t\tstack1.push(3);\n\t\tSystem.out.println(stack1.getmin());\n\t\tstack1.push(4);\n\t\tSystem.out.println(stack1.getmin());\n\t\tstack1.push(1);\n\t\tSystem.out.println(stack1.getmin());\n\t\tSystem.out.println(stack1.pop());\n\t\tSystem.out.println(stack1.getmin());\n\n\t\tSystem.out.println(\"=============\");\n\t}\n\n}\n\n```","source":"_posts/getMinStack.md","raw":"---\ntitle: 设计一个有getMin功能的\ndate: 2017-01-05\ncategories: 算法\ntag: 数据结构\n---\n\n\n\n设计一个有getMin功能的栈\n---\n\n实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。\n\n要求：\n\n1. pop、push、getMin操作的时间复杂度都是O(1)\n2. 设计的栈类型可以使用现成的栈结构\n\n解题：\n\n\n```\npackage chapter01_stackandqueue;\n\nimport java.util.Stack;\n\n/**\n * \n * 实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。 要求： 1. pop、push、getMin操作的时间复杂度都是O(1)\n * 2. 设计的栈类型可以使用现成的栈结构\n * \n * @author dream\n *\n */\npublic class Problem01_GetMinStack {\n\n\tpublic static class MyStack1 {\n\n\t\t/**\n\t\t * 两个栈，其中stacMin负责将最小值放在栈顶，stackData通过获取stackMin的peek()函数来获取到栈中的最小值\n\t\t */\n\t\tprivate Stack<Integer> stackData;\n\t\tprivate Stack<Integer> stackMin;\n\n\t\t/**\n\t\t * 在构造函数里面初始化两个栈\n\t\t */\n\t\tpublic MyStack1() {\n\t\t\tstackData = new Stack<Integer>();\n\t\t\tstackMin = new Stack<Integer>();\n\t\t}\n\n\t\t/**\n\t\t * 该函数是stackData弹出栈顶数据，如果弹出的数据恰好等于stackMin的数据，那么stackMin也弹出\n\t\t * @return\n\t\t */\n\t\tpublic Integer pop() {\n\t\t\tInteger num = (Integer) stackData.pop();\n\t\t\tif (num == getmin()) {\n\t\t\t\treturn (Integer) stackMin.pop();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 该函数是先判断stackMin是否为空，如果为空，就push新的数据，如果这个数小于stackMin中的栈顶元素，那么stackMin需要push新的数，不管怎么样\n\t\t * stackData都需要push新的数据\n\t\t * @param value\n\t\t */\n\t\tpublic void push(Integer value) {\n\t\t\tif (stackMin.isEmpty()) {\n\t\t\t\tstackMin.push(value);\n\t\t\t}\n\n\t\t\telse if (value < getmin()) {\n\t\t\t\tstackMin.push(value);\n\t\t\t}\n\t\t\tstackData.push(value);\n\t\t}\n\n\t\t/**\n\t\t * 该函数是当stackMin为空的话第一次也得push到stackMin的栈中，返回stackMin的栈顶元素\n\t\t * @return\n\t\t */\n\t\tpublic Integer getmin() {\n\t\t\tif (stackMin == null) {\n\t\t\t\tthrow new RuntimeException(\"stackMin is empty\");\n\t\t\t}\n\t\t\treturn (Integer) stackMin.peek();\n\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t/**\n\t\t * 要注意要将MyStack1声明成静态的，静态内部类不持有外部类的引用\n\t\t */\n\t\tMyStack1 stack1 = new MyStack1();\n\t\tstack1.push(3);\n\t\tSystem.out.println(stack1.getmin());\n\t\tstack1.push(4);\n\t\tSystem.out.println(stack1.getmin());\n\t\tstack1.push(1);\n\t\tSystem.out.println(stack1.getmin());\n\t\tSystem.out.println(stack1.pop());\n\t\tSystem.out.println(stack1.getmin());\n\n\t\tSystem.out.println(\"=============\");\n\t}\n\n}\n\n```","slug":"getMinStack","published":1,"updated":"2019-12-13T10:03:24.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck441f4n90000inl9b98s0uqx","content":"<h2 id=\"设计一个有getMin功能的栈\"><a href=\"#设计一个有getMin功能的栈\" class=\"headerlink\" title=\"设计一个有getMin功能的栈\"></a>设计一个有getMin功能的栈</h2><p>实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。</p>\n<p>要求：</p>\n<ol>\n<li>pop、push、getMin操作的时间复杂度都是O(1)</li>\n<li>设计的栈类型可以使用现成的栈结构</li>\n</ol>\n<p>解题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">package chapter01_stackandqueue;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Stack;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * 实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。 要求： 1. pop、push、getMin操作的时间复杂度都是O(1)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * 2. 设计的栈类型可以使用现成的栈结构</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * @author dream</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"> *</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"> *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class Problem01_GetMinStack &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static class MyStack1 &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 两个栈，其中stacMin负责将最小值放在栈顶，stackData通过获取stackMin的peek()函数来获取到栈中的最小值</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tprivate Stack&lt;Integer&gt; stackData;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tprivate Stack&lt;Integer&gt; stackMin;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 在构造函数里面初始化两个栈</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic MyStack1() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstackData &#x3D; new Stack&lt;Integer&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstackMin &#x3D; new Stack&lt;Integer&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 该函数是stackData弹出栈顶数据，如果弹出的数据恰好等于stackMin的数据，那么stackMin也弹出</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * @return</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic Integer pop() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tInteger num &#x3D; (Integer) stackData.pop();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (num &#x3D;&#x3D; getmin()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\treturn (Integer) stackMin.pop();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn null;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 该函数是先判断stackMin是否为空，如果为空，就push新的数据，如果这个数小于stackMin中的栈顶元素，那么stackMin需要push新的数，不管怎么样</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * stackData都需要push新的数据</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * @param value</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic void push(Integer value) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (stackMin.isEmpty()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tstackMin.push(value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\telse if (value &lt; getmin()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tstackMin.push(value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstackData.push(value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 该函数是当stackMin为空的话第一次也得push到stackMin的栈中，返回stackMin的栈顶元素</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * @return</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic Integer getmin() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (stackMin &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tthrow new RuntimeException(&quot;stackMin is empty&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn (Integer) stackMin.peek();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 要注意要将MyStack1声明成静态的，静态内部类不持有外部类的引用</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tMyStack1 stack1 &#x3D; new MyStack1();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tstack1.push(3);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tstack1.push(4);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tstack1.push(1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.pop());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设计一个有getMin功能的栈\"><a href=\"#设计一个有getMin功能的栈\" class=\"headerlink\" title=\"设计一个有getMin功能的栈\"></a>设计一个有getMin功能的栈</h2><p>实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。</p>\n<p>要求：</p>\n<ol>\n<li>pop、push、getMin操作的时间复杂度都是O(1)</li>\n<li>设计的栈类型可以使用现成的栈结构</li>\n</ol>\n<p>解题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">package chapter01_stackandqueue;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Stack;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * 实现一个特殊的栈，在实现栈的基本功能的基础上，在实现返回栈中最小元素的操作。 要求： 1. pop、push、getMin操作的时间复杂度都是O(1)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * 2. 设计的栈类型可以使用现成的栈结构</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"> * @author dream</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"> *</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"> *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class Problem01_GetMinStack &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static class MyStack1 &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 两个栈，其中stacMin负责将最小值放在栈顶，stackData通过获取stackMin的peek()函数来获取到栈中的最小值</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tprivate Stack&lt;Integer&gt; stackData;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tprivate Stack&lt;Integer&gt; stackMin;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 在构造函数里面初始化两个栈</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic MyStack1() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstackData &#x3D; new Stack&lt;Integer&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstackMin &#x3D; new Stack&lt;Integer&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 该函数是stackData弹出栈顶数据，如果弹出的数据恰好等于stackMin的数据，那么stackMin也弹出</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * @return</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic Integer pop() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tInteger num &#x3D; (Integer) stackData.pop();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (num &#x3D;&#x3D; getmin()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\treturn (Integer) stackMin.pop();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn null;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 该函数是先判断stackMin是否为空，如果为空，就push新的数据，如果这个数小于stackMin中的栈顶元素，那么stackMin需要push新的数，不管怎么样</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * stackData都需要push新的数据</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * @param value</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic void push(Integer value) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (stackMin.isEmpty()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tstackMin.push(value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\telse if (value &lt; getmin()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tstackMin.push(value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tstackData.push(value);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 该函数是当stackMin为空的话第一次也得push到stackMin的栈中，返回stackMin的栈顶元素</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * @return</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tpublic Integer getmin() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\tif (stackMin &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\tthrow new RuntimeException(&quot;stackMin is empty&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\treturn (Integer) stackMin.peek();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t * 要注意要将MyStack1声明成静态的，静态内部类不持有外部类的引用</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tMyStack1 stack1 &#x3D; new MyStack1();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tstack1.push(3);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tstack1.push(4);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tstack1.push(1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.pop());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(stack1.getmin());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>"},{"title":"查看单测代码覆盖率","date":"2017-03-04T16:00:00.000Z","_content":"\n## 查看单测代码覆盖率\n\n### 查看单测代码覆盖率\n\n**工程根目录执行命令：**\n\n```bash\n./gradlew :${moduleName}:jacocoTestReport\n```\n\n漫长的等待后，在指定目录 **${module}/build/reports/jacoco/jacocoTestReport/html/** 中找到 **index.html** 文件，使用浏览器打开就可以查看覆盖率：\n\n![image1](unitTest2-2.png)\n\n![image1](unitTest2-1.png)\n\n页面末尾可以看到对应覆盖率","source":"_posts/unitTest2.md","raw":"---\ntitle: 查看单测代码覆盖率\ndate: 2017-03-05\ncategories: Android\ntag: 单元测试\n---\n\n## 查看单测代码覆盖率\n\n### 查看单测代码覆盖率\n\n**工程根目录执行命令：**\n\n```bash\n./gradlew :${moduleName}:jacocoTestReport\n```\n\n漫长的等待后，在指定目录 **${module}/build/reports/jacoco/jacocoTestReport/html/** 中找到 **index.html** 文件，使用浏览器打开就可以查看覆盖率：\n\n![image1](unitTest2-2.png)\n\n![image1](unitTest2-1.png)\n\n页面末尾可以看到对应覆盖率","slug":"unitTest2","published":1,"updated":"2019-12-13T10:56:52.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck441f4nf0001inl9egqgccb7","content":"<h2 id=\"查看单测代码覆盖率\"><a href=\"#查看单测代码覆盖率\" class=\"headerlink\" title=\"查看单测代码覆盖率\"></a>查看单测代码覆盖率</h2><h3 id=\"查看单测代码覆盖率-1\"><a href=\"#查看单测代码覆盖率-1\" class=\"headerlink\" title=\"查看单测代码覆盖率\"></a>查看单测代码覆盖率</h3><p><strong>工程根目录执行命令：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew :<span class=\"variable\">$&#123;moduleName&#125;</span>:jacocoTestReport</span></pre></td></tr></table></figure>\n\n<p>漫长的等待后，在指定目录 <strong>${module}/build/reports/jacoco/jacocoTestReport/html/</strong> 中找到 <strong>index.html</strong> 文件，使用浏览器打开就可以查看覆盖率：</p>\n<p><img src=\"unitTest2-2.png\" alt=\"image1\"></p>\n<p><img src=\"unitTest2-1.png\" alt=\"image1\"></p>\n<p>页面末尾可以看到对应覆盖率</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看单测代码覆盖率\"><a href=\"#查看单测代码覆盖率\" class=\"headerlink\" title=\"查看单测代码覆盖率\"></a>查看单测代码覆盖率</h2><h3 id=\"查看单测代码覆盖率-1\"><a href=\"#查看单测代码覆盖率-1\" class=\"headerlink\" title=\"查看单测代码覆盖率\"></a>查看单测代码覆盖率</h3><p><strong>工程根目录执行命令：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew :<span class=\"variable\">$&#123;moduleName&#125;</span>:jacocoTestReport</span></pre></td></tr></table></figure>\n\n<p>漫长的等待后，在指定目录 <strong>${module}/build/reports/jacoco/jacocoTestReport/html/</strong> 中找到 <strong>index.html</strong> 文件，使用浏览器打开就可以查看覆盖率：</p>\n<p><img src=\"unitTest2-2.png\" alt=\"image1\"></p>\n<p><img src=\"unitTest2-1.png\" alt=\"image1\"></p>\n<p>页面末尾可以看到对应覆盖率</p>\n"},{"title":"踩坑记录","date":"2017-03-04T16:00:00.000Z","_content":"\n## 踩坑记录\n\n## 1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho 拦截器找不到，导致编译不通过，gradle 中需要加上：\n\n```groovy\n//测试用例中 stetho 找不到 原因未知\ntestImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'\n```\n\n\n\n2、有些基础库，比如 JsonUtils，Net等，会使用 BaseApplication.INSTANCE ，会出现空指针，不过找到了完美解决方案\n\n```java\n@RunWith(RobolectricTestRunner.class)\n@Config(\n    // 指定 Application 为 BaseApplication，可以不写\n    application = BaseApplication.class\n)\npublic class MyClassTest {\n \n    @Test\n    public void testContext() {\n        //正常情况下，Context 可以使用 RuntimeEnvironment.application\n        Assert.assertNotNull(BaseApplication.INSTANCE);\n    }\n \n}\n```\n\n3、有一些基础库需要先初始化才能使用，如果多个测试方法使用该库，建议在 before 中进行初始化\n\n4、kotlin 中使用单元测试有个小坑：\n\n```java\n@RunWith(RobolectricTestRunner::class)\n@Config(\n    // 指定 Application 为 BaseApplication，可以不写\n    application = BaseApplication::class\n)\nclass PresetManagerUnitTest {\n \n    @Test\n    fun testDataFilter() {\n        SearchPresetManager.mooc()\n    }\n}\n```\n\n在 kotlin 中，注解引用 java class 时，使用 ${className}::class ，而不是 ${className}.class ","source":"_posts/unitTest3.md","raw":"---\ntitle: 踩坑记录\ndate: 2017-03-05\ncategories: Android\ntag: 单元测试\n---\n\n## 踩坑记录\n\n## 1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho 拦截器找不到，导致编译不通过，gradle 中需要加上：\n\n```groovy\n//测试用例中 stetho 找不到 原因未知\ntestImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'\n```\n\n\n\n2、有些基础库，比如 JsonUtils，Net等，会使用 BaseApplication.INSTANCE ，会出现空指针，不过找到了完美解决方案\n\n```java\n@RunWith(RobolectricTestRunner.class)\n@Config(\n    // 指定 Application 为 BaseApplication，可以不写\n    application = BaseApplication.class\n)\npublic class MyClassTest {\n \n    @Test\n    public void testContext() {\n        //正常情况下，Context 可以使用 RuntimeEnvironment.application\n        Assert.assertNotNull(BaseApplication.INSTANCE);\n    }\n \n}\n```\n\n3、有一些基础库需要先初始化才能使用，如果多个测试方法使用该库，建议在 before 中进行初始化\n\n4、kotlin 中使用单元测试有个小坑：\n\n```java\n@RunWith(RobolectricTestRunner::class)\n@Config(\n    // 指定 Application 为 BaseApplication，可以不写\n    application = BaseApplication::class\n)\nclass PresetManagerUnitTest {\n \n    @Test\n    fun testDataFilter() {\n        SearchPresetManager.mooc()\n    }\n}\n```\n\n在 kotlin 中，注解引用 java class 时，使用 ${className}::class ，而不是 ${className}.class ","slug":"unitTest3","published":1,"updated":"2019-12-13T10:57:17.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck441f4np0003inl9hehg68m0","content":"<h2 id=\"踩坑记录\"><a href=\"#踩坑记录\" class=\"headerlink\" title=\"踩坑记录\"></a>踩坑记录</h2><h2 id=\"1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho-拦截器找不到，导致编译不通过，gradle-中需要加上：\"><a href=\"#1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho-拦截器找不到，导致编译不通过，gradle-中需要加上：\" class=\"headerlink\" title=\"1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho 拦截器找不到，导致编译不通过，gradle 中需要加上：\"></a>1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho 拦截器找不到，导致编译不通过，gradle 中需要加上：</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试用例中 stetho 找不到 原因未知</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">testImplementation <span class=\"string\">'com.facebook.stetho:stetho-okhttp3:1.5.1'</span></span></pre></td></tr></table></figure>\n\n\n\n<p>2、有些基础库，比如 JsonUtils，Net等，会使用 BaseApplication.INSTANCE ，会出现空指针，不过找到了完美解决方案</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">@<span class=\"title\">Config</span>(</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    // 指定 <span class=\"title\">Application</span> 为 <span class=\"title\">BaseApplication</span>，可以不写</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    <span class=\"title\">application</span> </span>= BaseApplication<span class=\"class\">.<span class=\"keyword\">class</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">MyClassTest</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testContext</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//正常情况下，Context 可以使用 RuntimeEnvironment.application</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Assert.assertNotNull(BaseApplication.INSTANCE);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>3、有一些基础库需要先初始化才能使用，如果多个测试方法使用该库，建议在 before 中进行初始化</p>\n<p>4、kotlin 中使用单元测试有个小坑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner::<span class=\"class\"><span class=\"keyword\">class</span>)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">@<span class=\"title\">Config</span>(</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    // 指定 <span class=\"title\">Application</span> 为 <span class=\"title\">BaseApplication</span>，可以不写</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    <span class=\"title\">application</span> </span>= BaseApplication::<span class=\"class\"><span class=\"keyword\">class</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">PresetManagerUnitTest</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">testDataFilter</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        SearchPresetManager.mooc()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>在 kotlin 中，注解引用 java class 时，使用 ${className}::class ，而不是 ${className}.class </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"踩坑记录\"><a href=\"#踩坑记录\" class=\"headerlink\" title=\"踩坑记录\"></a>踩坑记录</h2><h2 id=\"1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho-拦截器找不到，导致编译不通过，gradle-中需要加上：\"><a href=\"#1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho-拦截器找不到，导致编译不通过，gradle-中需要加上：\" class=\"headerlink\" title=\"1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho 拦截器找不到，导致编译不通过，gradle 中需要加上：\"></a>1、首先第一个坑，可能其他组件也会遇到，就是编译时，stetho 拦截器找不到，导致编译不通过，gradle 中需要加上：</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试用例中 stetho 找不到 原因未知</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">testImplementation <span class=\"string\">'com.facebook.stetho:stetho-okhttp3:1.5.1'</span></span></pre></td></tr></table></figure>\n\n\n\n<p>2、有些基础库，比如 JsonUtils，Net等，会使用 BaseApplication.INSTANCE ，会出现空指针，不过找到了完美解决方案</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">@<span class=\"title\">Config</span>(</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    // 指定 <span class=\"title\">Application</span> 为 <span class=\"title\">BaseApplication</span>，可以不写</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    <span class=\"title\">application</span> </span>= BaseApplication<span class=\"class\">.<span class=\"keyword\">class</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">MyClassTest</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testContext</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//正常情况下，Context 可以使用 RuntimeEnvironment.application</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Assert.assertNotNull(BaseApplication.INSTANCE);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>3、有一些基础库需要先初始化才能使用，如果多个测试方法使用该库，建议在 before 中进行初始化</p>\n<p>4、kotlin 中使用单元测试有个小坑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner::<span class=\"class\"><span class=\"keyword\">class</span>)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">@<span class=\"title\">Config</span>(</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    // 指定 <span class=\"title\">Application</span> 为 <span class=\"title\">BaseApplication</span>，可以不写</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">    <span class=\"title\">application</span> </span>= BaseApplication::<span class=\"class\"><span class=\"keyword\">class</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">PresetManagerUnitTest</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">testDataFilter</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        SearchPresetManager.mooc()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>在 kotlin 中，注解引用 java class 时，使用 ${className}::class ，而不是 ${className}.class </p>\n"},{"title":"单元测试入门","date":"2017-03-03T16:00:00.000Z","_content":"\n## 单元测试准备工作\n\n### 一、单测工具的选择：JUnit + Robolectric + Jacoco\n\n   AndroidTest 在前期做过尝试，需要依赖真机或模拟器，还要经历编译打包安装过程，开发效率低下\n   JUnit 是在 PC 端执行测试代码，编译速度快便于调试，但无法使用 Android api\n   Robolectric 可以模拟 Android 的 Context 环境，与 JUnit 相结合很好的解决了上述问题，不过也存在一些坑\n  Jacoco 是用来评估单元测试覆盖率的\n\n### 二、代码配置：\n\n 1、**引入官方默认依赖**\n\n Android Studio 默认会添加一些依赖，给代码添加依赖就跟给普通的 flavor 添加依赖一样\n\n```groovy\ndependencies {\n     // 使用 junit 进行本地单元测试\n     testImplementation 'junit:junit:4.12'\n     // 使用 android test runner 和 espresso 进行仪器测试 但我们不使用\n     // androidTestImplementation 'com.android.support.test:runner:1.0.2'\n     // androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n     //使用 Robolectric\n     testImplementation 'org.robolectric:robolectric:4.3'\n}\n//根目录配置 jacoco\nzhihu {\n    jacoco {\n        useDefaultCoverage true\n    }\n}\n```\n\n\n\n**2、允许 robolectric 读取 assets、resources 和 manifests，在 build.gradle 中添加**\n\n```groovy\nandroid {\n    testOptions {\n        unitTests {\n            includeAndroidResources = true\n        }\n    }\n}\n```\n\n\n\n**3、在 gradle.properties 中添加**\n\n```\nandroid.enableUnitTestBinaryResources = true\n```\n\n\n\n### 三、编写测试代码\n\n使用 Robolectric 与 junit 基本一致，唯一不同的地方在于要声明使用 `RobolectricTestRunner` 以及做一些配置：\n\n使用 `RobolectricTestRunner` ，在单元测试类上添加注解即可，示例：\n\n```java\n@RunWith(RobolectricTestRunner.class)\npublic class MyClassTest {\n \n    @Test\n    public void testContext() {\n        //正常情况下，Context 可以使用 RuntimeEnvironment.application\n        Assert.assertNotNull(RuntimeEnvironment.application);\n    }\n \n}\n```\n\n","source":"_posts/unitTest1.md","raw":"---\ntitle: 单元测试入门\ndate: 2017-03-04\ncategories: Android\ntag: 单元测试\n---\n\n## 单元测试准备工作\n\n### 一、单测工具的选择：JUnit + Robolectric + Jacoco\n\n   AndroidTest 在前期做过尝试，需要依赖真机或模拟器，还要经历编译打包安装过程，开发效率低下\n   JUnit 是在 PC 端执行测试代码，编译速度快便于调试，但无法使用 Android api\n   Robolectric 可以模拟 Android 的 Context 环境，与 JUnit 相结合很好的解决了上述问题，不过也存在一些坑\n  Jacoco 是用来评估单元测试覆盖率的\n\n### 二、代码配置：\n\n 1、**引入官方默认依赖**\n\n Android Studio 默认会添加一些依赖，给代码添加依赖就跟给普通的 flavor 添加依赖一样\n\n```groovy\ndependencies {\n     // 使用 junit 进行本地单元测试\n     testImplementation 'junit:junit:4.12'\n     // 使用 android test runner 和 espresso 进行仪器测试 但我们不使用\n     // androidTestImplementation 'com.android.support.test:runner:1.0.2'\n     // androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n     //使用 Robolectric\n     testImplementation 'org.robolectric:robolectric:4.3'\n}\n//根目录配置 jacoco\nzhihu {\n    jacoco {\n        useDefaultCoverage true\n    }\n}\n```\n\n\n\n**2、允许 robolectric 读取 assets、resources 和 manifests，在 build.gradle 中添加**\n\n```groovy\nandroid {\n    testOptions {\n        unitTests {\n            includeAndroidResources = true\n        }\n    }\n}\n```\n\n\n\n**3、在 gradle.properties 中添加**\n\n```\nandroid.enableUnitTestBinaryResources = true\n```\n\n\n\n### 三、编写测试代码\n\n使用 Robolectric 与 junit 基本一致，唯一不同的地方在于要声明使用 `RobolectricTestRunner` 以及做一些配置：\n\n使用 `RobolectricTestRunner` ，在单元测试类上添加注解即可，示例：\n\n```java\n@RunWith(RobolectricTestRunner.class)\npublic class MyClassTest {\n \n    @Test\n    public void testContext() {\n        //正常情况下，Context 可以使用 RuntimeEnvironment.application\n        Assert.assertNotNull(RuntimeEnvironment.application);\n    }\n \n}\n```\n\n","slug":"unitTest1","published":1,"updated":"2019-12-13T10:56:57.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck441f4nv0005inl9ecgc0xtz","content":"<h2 id=\"单元测试准备工作\"><a href=\"#单元测试准备工作\" class=\"headerlink\" title=\"单元测试准备工作\"></a>单元测试准备工作</h2><h3 id=\"一、单测工具的选择：JUnit-Robolectric-Jacoco\"><a href=\"#一、单测工具的选择：JUnit-Robolectric-Jacoco\" class=\"headerlink\" title=\"一、单测工具的选择：JUnit + Robolectric + Jacoco\"></a>一、单测工具的选择：JUnit + Robolectric + Jacoco</h3><p>   AndroidTest 在前期做过尝试，需要依赖真机或模拟器，还要经历编译打包安装过程，开发效率低下<br>   JUnit 是在 PC 端执行测试代码，编译速度快便于调试，但无法使用 Android api<br>   Robolectric 可以模拟 Android 的 Context 环境，与 JUnit 相结合很好的解决了上述问题，不过也存在一些坑<br>  Jacoco 是用来评估单元测试覆盖率的</p>\n<h3 id=\"二、代码配置：\"><a href=\"#二、代码配置：\" class=\"headerlink\" title=\"二、代码配置：\"></a>二、代码配置：</h3><p> 1、<strong>引入官方默认依赖</strong></p>\n<p> Android Studio 默认会添加一些依赖，给代码添加依赖就跟给普通的 flavor 添加依赖一样</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// 使用 junit 进行本地单元测试</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">     testImplementation <span class=\"string\">'junit:junit:4.12'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// 使用 android test runner 和 espresso 进行仪器测试 但我们不使用</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// androidTestImplementation 'com.android.support.test:runner:1.0.2'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">//使用 Robolectric</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">     testImplementation <span class=\"string\">'org.robolectric:robolectric:4.3'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根目录配置 jacoco</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">zhihu &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    jacoco &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        useDefaultCoverage <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、允许 robolectric 读取 assets、resources 和 manifests，在 build.gradle 中添加</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    testOptions &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        unitTests &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">            includeAndroidResources = <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<p><strong>3、在 gradle.properties 中添加</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">android.enableUnitTestBinaryResources &#x3D; true</span></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、编写测试代码\"><a href=\"#三、编写测试代码\" class=\"headerlink\" title=\"三、编写测试代码\"></a>三、编写测试代码</h3><p>使用 Robolectric 与 junit 基本一致，唯一不同的地方在于要声明使用 <code>RobolectricTestRunner</code> 以及做一些配置：</p>\n<p>使用 <code>RobolectricTestRunner</code> ，在单元测试类上添加注解即可，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">MyClassTest</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testContext</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//正常情况下，Context 可以使用 RuntimeEnvironment.application</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Assert.assertNotNull(RuntimeEnvironment.application);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单元测试准备工作\"><a href=\"#单元测试准备工作\" class=\"headerlink\" title=\"单元测试准备工作\"></a>单元测试准备工作</h2><h3 id=\"一、单测工具的选择：JUnit-Robolectric-Jacoco\"><a href=\"#一、单测工具的选择：JUnit-Robolectric-Jacoco\" class=\"headerlink\" title=\"一、单测工具的选择：JUnit + Robolectric + Jacoco\"></a>一、单测工具的选择：JUnit + Robolectric + Jacoco</h3><p>   AndroidTest 在前期做过尝试，需要依赖真机或模拟器，还要经历编译打包安装过程，开发效率低下<br>   JUnit 是在 PC 端执行测试代码，编译速度快便于调试，但无法使用 Android api<br>   Robolectric 可以模拟 Android 的 Context 环境，与 JUnit 相结合很好的解决了上述问题，不过也存在一些坑<br>  Jacoco 是用来评估单元测试覆盖率的</p>\n<h3 id=\"二、代码配置：\"><a href=\"#二、代码配置：\" class=\"headerlink\" title=\"二、代码配置：\"></a>二、代码配置：</h3><p> 1、<strong>引入官方默认依赖</strong></p>\n<p> Android Studio 默认会添加一些依赖，给代码添加依赖就跟给普通的 flavor 添加依赖一样</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// 使用 junit 进行本地单元测试</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">     testImplementation <span class=\"string\">'junit:junit:4.12'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// 使用 android test runner 和 espresso 进行仪器测试 但我们不使用</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// androidTestImplementation 'com.android.support.test:runner:1.0.2'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">//使用 Robolectric</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">     testImplementation <span class=\"string\">'org.robolectric:robolectric:4.3'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根目录配置 jacoco</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">zhihu &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    jacoco &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        useDefaultCoverage <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、允许 robolectric 读取 assets、resources 和 manifests，在 build.gradle 中添加</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    testOptions &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        unitTests &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">            includeAndroidResources = <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<p><strong>3、在 gradle.properties 中添加</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">android.enableUnitTestBinaryResources &#x3D; true</span></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、编写测试代码\"><a href=\"#三、编写测试代码\" class=\"headerlink\" title=\"三、编写测试代码\"></a>三、编写测试代码</h3><p>使用 Robolectric 与 junit 基本一致，唯一不同的地方在于要声明使用 <code>RobolectricTestRunner</code> 以及做一些配置：</p>\n<p>使用 <code>RobolectricTestRunner</code> ，在单元测试类上添加注解即可，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">MyClassTest</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testContext</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//正常情况下，Context 可以使用 RuntimeEnvironment.application</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Assert.assertNotNull(RuntimeEnvironment.application);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n"},{"title":"万能 Logger","date":"2017-03-04T16:00:00.000Z","_content":"\n## 万能 Logger\n\n### 可定位代码位置&Android环境与单测通用的 Logger\n\n为了方便大家在开发环境和单元测试环境都能看到日志，开发了此工具\n\n```kotlin\nobject Logger {\n \n    //根据是否是 x86 架构来判断是不是手机（目前最取巧的方法）\n    private val isAndroid: Boolean by lazy {\n        try {\n            !System.getProperty(\"os.arch\")!!.contains(\"x86\")\n        } catch (e: ClassNotFoundException) {\n            false\n        }\n    }\n \n    private fun debug(tag:String, msg: Any?) {\n        if (isAndroid) {\n            Log.d(tag, msg.toString())\n        } else{\n            println(msg)\n        }\n    }\n \n    private fun error(tag:String, msg: Any?, e:Throwable? = null) {\n        if (isAndroid) {\n            Log.e(tag, msg.toString(), e)\n        } else{\n            System.err.println(msg)\n            e?.let {\n                System.err.println(it)\n            }\n        }\n    }\n \n    private val dateFormat by lazy { FastDateFormat.getInstance(\"HH:mm:ss:SSS\") }\n    //使用 系统时间（Android log 自带时间所以不需要携带）+ 线程名字 + 代码行号 来构造日志前缀\n    private val header = { stackTraceElement: StackTraceElement ->\n        when (isAndroid) {\n            true -> \"[${Thread.currentThread().name}] \"\n            false -> \"${dateFormat.format(Date(System.currentTimeMillis()))} [${Thread.currentThread().name}] \"\n        } + codeLine(stackTraceElement)\n    }\n \n    private fun codeLine(ste: StackTraceElement): String {\n        val buf = StringBuilder()\n        buf.append(\"${ste.className.split(\".\").last()}.${ste.methodName}\")\n        if (ste.isNativeMethod) {\n            buf.append(\"(Native Method)\")\n        } else {\n            val fName = ste.fileName\n            if (fName == null) {\n                buf.append(\"(Unknown Source)\")\n            } else {\n                val lineNum = ste.lineNumber\n                buf.append('(')\n                buf.append(fName)\n                if (lineNum >= 0) {\n                    buf.append(':').append(lineNum)\n                }\n                buf.append(\"):\")\n            }\n        }\n        return buf.toString()\n    }\n \n \n    @JvmStatic\n    fun d(tag:String, msg: Any?) {\n        val stackTrace =\n            Thread.currentThread().stackTrace.dropWhile { it.fileName != \"Logger.kt\" || it.methodName != \"d\" }\n        val lineNum= if (stackTrace.size <= 1)  \"\" else header(stackTrace[1])\n        debug(tag, \"$lineNum $msg\")\n    }\n \n    @JvmStatic\n    fun e(tag:String, msg: Any?, e:Throwable? = null)  {\n        val stackTrace =\n            Thread.currentThread().stackTrace.dropWhile { it.fileName != \"Logger.kt\" || it.methodName != \"e\" }\n        val lineNum= if (stackTrace.size <= 1)  \"\" else header(stackTrace[1])\n        error(tag, \"$lineNum $msg\", e)\n    }\n}\n```\n\n使用方法：\n\n跑在单元测试代码中：\n\n```kotlin\n@Test\nfun test1() {\n    Logger.d(\"test\",\"hello test2，告诉我有异常吗？\")\n    test2()\n}\n \nfun test2() {\n    Logger.e(\"test\",\"hello test1\", Exception(\"似乎出了点问题～\"))\n}\n```\n\n控制台输出结果：箭头处点击可以跳转到指定代码位置\n\n![image1](/Users/simonliu/Documents/博客/技术/Android/单元测试/unittest4-1.png)\n\n运行在手机端\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        test1()\n    }\n \n    fun test1() {\n        Logger.d(\"test\",\"hello test2，告诉我有异常吗？\")\n        test2()\n    }\n \n    fun test2() {\n        Logger.e(\"test\",\"hello test1\", Exception(\"似乎出了点问题～\"))\n    }\n \n}\n```\n\nLogcat 输出结果：箭头处点击可以跳转到指定代码位置\n\n![image2](/Users/simonliu/Documents/博客/技术/Android/单元测试/unittest4-2.png)\n\n如此依赖，无论是业务代码中还是单元测试代码中，都可以很方便的使用 Logger 来打印日志，在单测中也可以很方便的在控制台看到业务代码中打印的日志\n\n代码量很小，大家可以根据需要进行一定的修改后使用，欢迎提供建议和指导\n\n","source":"_posts/unitTest4.md","raw":"---\ntitle: 万能 Logger\ndate: 2017-03-05\ncategories: Android\ntag: 单元测试\n---\n\n## 万能 Logger\n\n### 可定位代码位置&Android环境与单测通用的 Logger\n\n为了方便大家在开发环境和单元测试环境都能看到日志，开发了此工具\n\n```kotlin\nobject Logger {\n \n    //根据是否是 x86 架构来判断是不是手机（目前最取巧的方法）\n    private val isAndroid: Boolean by lazy {\n        try {\n            !System.getProperty(\"os.arch\")!!.contains(\"x86\")\n        } catch (e: ClassNotFoundException) {\n            false\n        }\n    }\n \n    private fun debug(tag:String, msg: Any?) {\n        if (isAndroid) {\n            Log.d(tag, msg.toString())\n        } else{\n            println(msg)\n        }\n    }\n \n    private fun error(tag:String, msg: Any?, e:Throwable? = null) {\n        if (isAndroid) {\n            Log.e(tag, msg.toString(), e)\n        } else{\n            System.err.println(msg)\n            e?.let {\n                System.err.println(it)\n            }\n        }\n    }\n \n    private val dateFormat by lazy { FastDateFormat.getInstance(\"HH:mm:ss:SSS\") }\n    //使用 系统时间（Android log 自带时间所以不需要携带）+ 线程名字 + 代码行号 来构造日志前缀\n    private val header = { stackTraceElement: StackTraceElement ->\n        when (isAndroid) {\n            true -> \"[${Thread.currentThread().name}] \"\n            false -> \"${dateFormat.format(Date(System.currentTimeMillis()))} [${Thread.currentThread().name}] \"\n        } + codeLine(stackTraceElement)\n    }\n \n    private fun codeLine(ste: StackTraceElement): String {\n        val buf = StringBuilder()\n        buf.append(\"${ste.className.split(\".\").last()}.${ste.methodName}\")\n        if (ste.isNativeMethod) {\n            buf.append(\"(Native Method)\")\n        } else {\n            val fName = ste.fileName\n            if (fName == null) {\n                buf.append(\"(Unknown Source)\")\n            } else {\n                val lineNum = ste.lineNumber\n                buf.append('(')\n                buf.append(fName)\n                if (lineNum >= 0) {\n                    buf.append(':').append(lineNum)\n                }\n                buf.append(\"):\")\n            }\n        }\n        return buf.toString()\n    }\n \n \n    @JvmStatic\n    fun d(tag:String, msg: Any?) {\n        val stackTrace =\n            Thread.currentThread().stackTrace.dropWhile { it.fileName != \"Logger.kt\" || it.methodName != \"d\" }\n        val lineNum= if (stackTrace.size <= 1)  \"\" else header(stackTrace[1])\n        debug(tag, \"$lineNum $msg\")\n    }\n \n    @JvmStatic\n    fun e(tag:String, msg: Any?, e:Throwable? = null)  {\n        val stackTrace =\n            Thread.currentThread().stackTrace.dropWhile { it.fileName != \"Logger.kt\" || it.methodName != \"e\" }\n        val lineNum= if (stackTrace.size <= 1)  \"\" else header(stackTrace[1])\n        error(tag, \"$lineNum $msg\", e)\n    }\n}\n```\n\n使用方法：\n\n跑在单元测试代码中：\n\n```kotlin\n@Test\nfun test1() {\n    Logger.d(\"test\",\"hello test2，告诉我有异常吗？\")\n    test2()\n}\n \nfun test2() {\n    Logger.e(\"test\",\"hello test1\", Exception(\"似乎出了点问题～\"))\n}\n```\n\n控制台输出结果：箭头处点击可以跳转到指定代码位置\n\n![image1](/Users/simonliu/Documents/博客/技术/Android/单元测试/unittest4-1.png)\n\n运行在手机端\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        test1()\n    }\n \n    fun test1() {\n        Logger.d(\"test\",\"hello test2，告诉我有异常吗？\")\n        test2()\n    }\n \n    fun test2() {\n        Logger.e(\"test\",\"hello test1\", Exception(\"似乎出了点问题～\"))\n    }\n \n}\n```\n\nLogcat 输出结果：箭头处点击可以跳转到指定代码位置\n\n![image2](/Users/simonliu/Documents/博客/技术/Android/单元测试/unittest4-2.png)\n\n如此依赖，无论是业务代码中还是单元测试代码中，都可以很方便的使用 Logger 来打印日志，在单测中也可以很方便的在控制台看到业务代码中打印的日志\n\n代码量很小，大家可以根据需要进行一定的修改后使用，欢迎提供建议和指导\n\n","slug":"unitTest4","published":1,"updated":"2019-12-13T10:57:32.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck441f4nx0007inl98dzvgr6j","content":"<h2 id=\"万能-Logger\"><a href=\"#万能-Logger\" class=\"headerlink\" title=\"万能 Logger\"></a>万能 Logger</h2><h3 id=\"可定位代码位置-amp-Android环境与单测通用的-Logger\"><a href=\"#可定位代码位置-amp-Android环境与单测通用的-Logger\" class=\"headerlink\" title=\"可定位代码位置&amp;Android环境与单测通用的 Logger\"></a>可定位代码位置&amp;Android环境与单测通用的 Logger</h3><p>为了方便大家在开发环境和单元测试环境都能看到日志，开发了此工具</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Logger &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//根据是否是 x86 架构来判断是不是手机（目前最取巧的方法）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> isAndroid: <span class=\"built_in\">Boolean</span> <span class=\"keyword\">by</span> lazy &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">            !System.getProperty(<span class=\"string\">\"os.arch\"</span>)!!.contains(<span class=\"string\">\"x86\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: ClassNotFoundException) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">debug</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroid) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Log.d(tag, msg.toString())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">            println(msg)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">error</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?, e:<span class=\"type\">Throwable</span>? = <span class=\"literal\">null</span>)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroid) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Log.e(tag, msg.toString(), e)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">            System.err.println(msg)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">            e?.let &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">                System.err.println(it)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> dateFormat <span class=\"keyword\">by</span> lazy &#123; FastDateFormat.getInstance(<span class=\"string\">\"HH:mm:ss:SSS\"</span>) &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//使用 系统时间（Android log 自带时间所以不需要携带）+ 线程名字 + 代码行号 来构造日志前缀</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> header = &#123; stackTraceElement: StackTraceElement -&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">when</span> (isAndroid) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"literal\">true</span> -&gt; <span class=\"string\">\"[<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>] \"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"literal\">false</span> -&gt; <span class=\"string\">\"<span class=\"subst\">$&#123;dateFormat.format(Date(System.currentTimeMillis()))&#125;</span> [<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>] \"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; + codeLine(stackTraceElement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">codeLine</span><span class=\"params\">(ste: <span class=\"type\">StackTraceElement</span>)</span></span>: String &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> buf = StringBuilder()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        buf.append(<span class=\"string\">\"<span class=\"subst\">$&#123;ste.className.split(<span class=\"string\">\".\"</span>).last()&#125;</span>.<span class=\"subst\">$&#123;ste.methodName&#125;</span>\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (ste.isNativeMethod) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">            buf.append(<span class=\"string\">\"(Native Method)\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"keyword\">val</span> fName = ste.fileName</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"keyword\">if</span> (fName == <span class=\"literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(<span class=\"string\">\"(Unknown Source)\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"keyword\">val</span> lineNum = ste.lineNumber</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(<span class=\"string\">'('</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(fName)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"keyword\">if</span> (lineNum &gt;= <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    buf.append(<span class=\"string\">':'</span>).append(lineNum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(<span class=\"string\">\"):\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> buf.toString()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">d</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> stackTrace =</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Thread.currentThread().stackTrace.dropWhile &#123; it.fileName != <span class=\"string\">\"Logger.kt\"</span> || it.methodName != <span class=\"string\">\"d\"</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> lineNum= <span class=\"keyword\">if</span> (stackTrace.size &lt;= <span class=\"number\">1</span>)  <span class=\"string\">\"\"</span> <span class=\"keyword\">else</span> header(stackTrace[<span class=\"number\">1</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        debug(tag, <span class=\"string\">\"<span class=\"variable\">$lineNum</span> <span class=\"variable\">$msg</span>\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">e</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?, e:<span class=\"type\">Throwable</span>? = <span class=\"literal\">null</span>)</span></span>  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> stackTrace =</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Thread.currentThread().stackTrace.dropWhile &#123; it.fileName != <span class=\"string\">\"Logger.kt\"</span> || it.methodName != <span class=\"string\">\"e\"</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> lineNum= <span class=\"keyword\">if</span> (stackTrace.size &lt;= <span class=\"number\">1</span>)  <span class=\"string\">\"\"</span> <span class=\"keyword\">else</span> header(stackTrace[<span class=\"number\">1</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">        error(tag, <span class=\"string\">\"<span class=\"variable\">$lineNum</span> <span class=\"variable\">$msg</span>\"</span>, e)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>使用方法：</p>\n<p>跑在单元测试代码中：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Logger.d(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test2，告诉我有异常吗？\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    test2()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Logger.e(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test1\"</span>, Exception(<span class=\"string\">\"似乎出了点问题～\"</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>控制台输出结果：箭头处点击可以跳转到指定代码位置</p>\n<p><img src=\"/Users/simonliu/Documents/%E5%8D%9A%E5%AE%A2/%E6%8A%80%E6%9C%AF/Android/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/unittest4-1.png\" alt=\"image1\"></p>\n<p>运行在手机端</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test1()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Logger.d(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test2，告诉我有异常吗？\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test2()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Logger.e(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test1\"</span>, Exception(<span class=\"string\">\"似乎出了点问题～\"</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>Logcat 输出结果：箭头处点击可以跳转到指定代码位置</p>\n<p><img src=\"/Users/simonliu/Documents/%E5%8D%9A%E5%AE%A2/%E6%8A%80%E6%9C%AF/Android/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/unittest4-2.png\" alt=\"image2\"></p>\n<p>如此依赖，无论是业务代码中还是单元测试代码中，都可以很方便的使用 Logger 来打印日志，在单测中也可以很方便的在控制台看到业务代码中打印的日志</p>\n<p>代码量很小，大家可以根据需要进行一定的修改后使用，欢迎提供建议和指导</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"万能-Logger\"><a href=\"#万能-Logger\" class=\"headerlink\" title=\"万能 Logger\"></a>万能 Logger</h2><h3 id=\"可定位代码位置-amp-Android环境与单测通用的-Logger\"><a href=\"#可定位代码位置-amp-Android环境与单测通用的-Logger\" class=\"headerlink\" title=\"可定位代码位置&amp;Android环境与单测通用的 Logger\"></a>可定位代码位置&amp;Android环境与单测通用的 Logger</h3><p>为了方便大家在开发环境和单元测试环境都能看到日志，开发了此工具</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Logger &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//根据是否是 x86 架构来判断是不是手机（目前最取巧的方法）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> isAndroid: <span class=\"built_in\">Boolean</span> <span class=\"keyword\">by</span> lazy &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">            !System.getProperty(<span class=\"string\">\"os.arch\"</span>)!!.contains(<span class=\"string\">\"x86\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: ClassNotFoundException) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">debug</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroid) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Log.d(tag, msg.toString())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">            println(msg)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">error</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?, e:<span class=\"type\">Throwable</span>? = <span class=\"literal\">null</span>)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroid) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Log.e(tag, msg.toString(), e)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">            System.err.println(msg)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">            e?.let &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">                System.err.println(it)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> dateFormat <span class=\"keyword\">by</span> lazy &#123; FastDateFormat.getInstance(<span class=\"string\">\"HH:mm:ss:SSS\"</span>) &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//使用 系统时间（Android log 自带时间所以不需要携带）+ 线程名字 + 代码行号 来构造日志前缀</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> header = &#123; stackTraceElement: StackTraceElement -&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">when</span> (isAndroid) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"literal\">true</span> -&gt; <span class=\"string\">\"[<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>] \"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"literal\">false</span> -&gt; <span class=\"string\">\"<span class=\"subst\">$&#123;dateFormat.format(Date(System.currentTimeMillis()))&#125;</span> [<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>] \"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; + codeLine(stackTraceElement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">codeLine</span><span class=\"params\">(ste: <span class=\"type\">StackTraceElement</span>)</span></span>: String &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> buf = StringBuilder()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        buf.append(<span class=\"string\">\"<span class=\"subst\">$&#123;ste.className.split(<span class=\"string\">\".\"</span>).last()&#125;</span>.<span class=\"subst\">$&#123;ste.methodName&#125;</span>\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (ste.isNativeMethod) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">            buf.append(<span class=\"string\">\"(Native Method)\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"keyword\">val</span> fName = ste.fileName</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"keyword\">if</span> (fName == <span class=\"literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(<span class=\"string\">\"(Unknown Source)\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"keyword\">val</span> lineNum = ste.lineNumber</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(<span class=\"string\">'('</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(fName)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"keyword\">if</span> (lineNum &gt;= <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    buf.append(<span class=\"string\">':'</span>).append(lineNum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">                buf.append(<span class=\"string\">\"):\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> buf.toString()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">d</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> stackTrace =</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Thread.currentThread().stackTrace.dropWhile &#123; it.fileName != <span class=\"string\">\"Logger.kt\"</span> || it.methodName != <span class=\"string\">\"d\"</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> lineNum= <span class=\"keyword\">if</span> (stackTrace.size &lt;= <span class=\"number\">1</span>)  <span class=\"string\">\"\"</span> <span class=\"keyword\">else</span> header(stackTrace[<span class=\"number\">1</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        debug(tag, <span class=\"string\">\"<span class=\"variable\">$lineNum</span> <span class=\"variable\">$msg</span>\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">e</span><span class=\"params\">(tag:<span class=\"type\">String</span>, msg: <span class=\"type\">Any</span>?, e:<span class=\"type\">Throwable</span>? = <span class=\"literal\">null</span>)</span></span>  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> stackTrace =</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">            Thread.currentThread().stackTrace.dropWhile &#123; it.fileName != <span class=\"string\">\"Logger.kt\"</span> || it.methodName != <span class=\"string\">\"e\"</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">val</span> lineNum= <span class=\"keyword\">if</span> (stackTrace.size &lt;= <span class=\"number\">1</span>)  <span class=\"string\">\"\"</span> <span class=\"keyword\">else</span> header(stackTrace[<span class=\"number\">1</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">        error(tag, <span class=\"string\">\"<span class=\"variable\">$lineNum</span> <span class=\"variable\">$msg</span>\"</span>, e)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>使用方法：</p>\n<p>跑在单元测试代码中：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Logger.d(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test2，告诉我有异常吗？\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    test2()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Logger.e(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test1\"</span>, Exception(<span class=\"string\">\"似乎出了点问题～\"</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>控制台输出结果：箭头处点击可以跳转到指定代码位置</p>\n<p><img src=\"/Users/simonliu/Documents/%E5%8D%9A%E5%AE%A2/%E6%8A%80%E6%9C%AF/Android/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/unittest4-1.png\" alt=\"image1\"></p>\n<p>运行在手机端</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test1()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Logger.d(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test2，告诉我有异常吗？\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test2()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Logger.e(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"hello test1\"</span>, Exception(<span class=\"string\">\"似乎出了点问题～\"</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>Logcat 输出结果：箭头处点击可以跳转到指定代码位置</p>\n<p><img src=\"/Users/simonliu/Documents/%E5%8D%9A%E5%AE%A2/%E6%8A%80%E6%9C%AF/Android/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/unittest4-2.png\" alt=\"image2\"></p>\n<p>如此依赖，无论是业务代码中还是单元测试代码中，都可以很方便的使用 Logger 来打印日志，在单测中也可以很方便的在控制台看到业务代码中打印的日志</p>\n<p>代码量很小，大家可以根据需要进行一定的修改后使用，欢迎提供建议和指导</p>\n"}],"PostAsset":[{"_id":"source/_posts/unitTest2/unitTest2-1.png","slug":"unitTest2-1.png","post":"ck441f4nf0001inl9egqgccb7","modified":0,"renderable":0},{"_id":"source/_posts/unitTest2/unitTest2-2.png","slug":"unitTest2-2.png","post":"ck441f4nf0001inl9egqgccb7","modified":0,"renderable":0},{"_id":"source/_posts/unitTest4/unittest4-2.png","slug":"unittest4-2.png","post":"ck441f4nx0007inl98dzvgr6j","modified":0,"renderable":0},{"_id":"source/_posts/unitTest4/unittest4-1.png","slug":"unittest4-1.png","post":"ck441f4nx0007inl98dzvgr6j","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck43y8ihk0000sel9aycm9b3w","category_id":"ck43y8ihr0001sel9brsr6zk1","_id":"ck43y8ihv0004sel9fzj25cwe"},{"post_id":"ck43lf6gi00009hl929glfumy","category_id":"ck43y8ijc0005sel95mebd2fo","_id":"ck43y8ijd0008sel909x4f32a"},{"post_id":"ck43ycid80001t8l9efj8gcm7","category_id":"ck43y8ihr0001sel9brsr6zk1","_id":"ck43yehy70003t8l9h44k3m2y"},{"post_id":"ck43ygaap000ct8l9bn7s6pdt","category_id":"ck43y8ihr0001sel9brsr6zk1","_id":"ck43ygsnr000et8l975p94om1"},{"post_id":"ck43yivio000ht8l9419i9bvc","category_id":"ck43y8ihr0001sel9brsr6zk1","_id":"ck43yiviq000jt8l9g5mm3kx4"},{"post_id":"ck43ynbjb000kt8l9h3yq1ru5","category_id":"ck43y8ihr0001sel9brsr6zk1","_id":"ck43ynegh000mt8l95tll7de4"},{"post_id":"ck43yxwvr000ot8l902abg3q5","category_id":"ck43y8ihr0001sel9brsr6zk1","_id":"ck43yz11c000qt8l924d7895k"},{"post_id":"ck441f4n90000inl9b98s0uqx","category_id":"ck43y8ihr0001sel9brsr6zk1","_id":"ck441f4nx0006inl93sg4amfv"},{"post_id":"ck441f4nx0007inl98dzvgr6j","category_id":"ck441f4nu0004inl9hddybsiq","_id":"ck441f4o2000cinl9eoh29vqe"},{"post_id":"ck441f4nf0001inl9egqgccb7","category_id":"ck441f4nu0004inl9hddybsiq","_id":"ck441f4o2000finl974143lkh"},{"post_id":"ck441f4np0003inl9hehg68m0","category_id":"ck441f4nu0004inl9hddybsiq","_id":"ck441f4o3000hinl94d6c1ciw"},{"post_id":"ck441f4nv0005inl9ecgc0xtz","category_id":"ck441f4nu0004inl9hddybsiq","_id":"ck441f4o4000kinl96x2s10wp"}],"PostTag":[{"post_id":"ck43y8ihk0000sel9aycm9b3w","tag_id":"ck43y8ihu0002sel99rl5acbe","_id":"ck43y8ihu0003sel96pbhb5sl"},{"post_id":"ck43lf6gi00009hl929glfumy","tag_id":"ck43y8ijc0006sel9hrnj9ltq","_id":"ck43y8ijd0007sel9aotyegzz"},{"post_id":"ck43ycid80001t8l9efj8gcm7","tag_id":"ck43yehy70002t8l9b06n97gu","_id":"ck43yehy80004t8l9hheieid2"},{"post_id":"ck43ygaap000ct8l9bn7s6pdt","tag_id":"ck43yehy70002t8l9b06n97gu","_id":"ck43ygsnr000dt8l91qou71fl"},{"post_id":"ck43yivio000ht8l9419i9bvc","tag_id":"ck43yehy70002t8l9b06n97gu","_id":"ck43yiviq000it8l96hvhh62m"},{"post_id":"ck43ynbjb000kt8l9h3yq1ru5","tag_id":"ck43yehy70002t8l9b06n97gu","_id":"ck43ynegg000lt8l9evnz4l95"},{"post_id":"ck43yxwvr000ot8l902abg3q5","tag_id":"ck43yz11b000pt8l9cqhg3pxi","_id":"ck43yz11c000rt8l9fpmr1aej"},{"post_id":"ck43y8ihk0000sel9aycm9b3w","tag_id":"ck43yz11b000pt8l9cqhg3pxi","_id":"ck43yzdzb000tt8l91nhndrl3"},{"post_id":"ck441f4n90000inl9b98s0uqx","tag_id":"ck441f4ni0002inl9flx8cges","_id":"ck441f4nz0009inl9b9oi3bxr"},{"post_id":"ck441f4nf0001inl9egqgccb7","tag_id":"ck441f4ny0008inl9fwlk2j0c","_id":"ck441f4o2000einl9ekna4euu"},{"post_id":"ck441f4np0003inl9hehg68m0","tag_id":"ck441f4ny0008inl9fwlk2j0c","_id":"ck441f4o3000iinl9hloyhpns"},{"post_id":"ck441f4nv0005inl9ecgc0xtz","tag_id":"ck441f4ny0008inl9fwlk2j0c","_id":"ck441f4o4000linl9f27thixf"},{"post_id":"ck441f4nx0007inl98dzvgr6j","tag_id":"ck441f4ny0008inl9fwlk2j0c","_id":"ck441f4o4000minl9bkul25vg"}],"Tag":[{"name":"tag","_id":"ck421kpo80002r9nr5a3b6ero"},{"name":"tag2","_id":"ck421kpob0003r9nre714epie"},{"name":"杂谈","_id":"ck43l8ixo00012el9h09gat3o"},{"name":"二叉树","_id":"ck43y8ihu0002sel99rl5acbe"},{"name":"哲学","_id":"ck43y8ijc0006sel9hrnj9ltq"},{"name":"排序","_id":"ck43yehy70002t8l9b06n97gu"},{"name":"算法题","_id":"ck43yz11b000pt8l9cqhg3pxi"},{"name":"数据结构","_id":"ck441f4ni0002inl9flx8cges"},{"name":"单元测试","_id":"ck441f4ny0008inl9fwlk2j0c"}]}}